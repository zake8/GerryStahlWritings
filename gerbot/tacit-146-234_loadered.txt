Specifically PDF pages 146 to 234 
 
CHAPTER 5. GROUNDING 
EXPLICIT DESIGN KNOWLEDGE  
Part I presented several analyses of the process of interpretation in innovative 
design. The various analyses were not always entirely consistent with one another 
and were open to a variety of misinterpretations. Despite the effort to view them 
from the pe rspective of this dissertation, they retained the influences of their 
sources in very different enterprises: Alexander’s focus on patterns, Rittel’s on 
deliberation, Schön’s on discovery, Archie and Desi’s on habitability issues, and 
Heidegger’s on ontolog ical concerns. Although most of them (except Heidegger’s) 
were related to attempts at computer support for design, the analyses did not 
explicitly address issues of computer support. In order to provide a foundation for 
the development of a theory of compu ter support of interpretation in design in 
Chapter 6, a number of open issues need to be clarified in the present chapter. 
Inconsistencies should be resolved and misinterpretations guarded against.  
In Part I, evidence was presented in Chapters 2 and 3 to s how that design is an 
interpretive process. Then in Chapter 4, the character of interpretation as situated, 
perspectival, and linguistic was explicated using Heidegger’s philosophy. 
Although some examples from the earlier chapters were used to illustrate 
Heidegger’s ideas, the relation of Heidegger’s analysis of interpretation in general 
to interpretation in design specifically still needs to be addressed (Section 5.1). 
Here it will turn out that the domain of design fits Heidegger’s analysis particularly 
well in several interesting ways.  
A theory of computer support for interpretation in design centers on human -
computer interaction and the role of the people whose interpretive processes are to 
be supported. The distribution of roles between the computer and  the people is 
determined by how interpretation is socially grounded (Section 5.2). This includes 
the way in which the understood reality is socially constructed and how people 
have intentional access to that reality. It has implications for the problems o f 
application and relevance, which are critical for a theory of computer support.  
The theory of computer support is based on the transformations of tacit to explicit 
forms of knowledge (Section 5.3), by which people’s preunderstandings can be 
      Tacit and Explicit U nderstanding in Computer Support                                       147 
  articulated a nd represented in a computer. Definitions of tacit and explicit must be 
developed. The different forms explicit knowledge can take must be distinguished 
and the processes by which one form is transformed into another identified.  
5.1. Applying Heidegger’s P hilosophy to Design  
Heidegger’s philosophy offers what is arguably the most thorough account of the 
process of human understanding available. Although his analysis of interpretation 
is useful if one is to understand activities like innovative design, it ne ver addresses 
the realm of design directly. Heidegger discusses interpretation at a high level of 
generality and chooses his examples from interactions between people and 
physical artifacts, like the use of hammers by carpenters. He is concerned with the 
nature of understandingly being in the world. While a person’s world includes 
conceptual and imaginative realms like design, Heidegger’s examples primarily 
come from the world of physical artifacts which can be encountered perceptually.  
Design is distinctiv e. It has its own existential structure and characteristics. 
Heidegger’s philosophy must be adapted to the realm of design by reflection upon 
how design differs from Heidegger’s examples, and by modifying or extending his 
theory accordingly. Specifically, such an extension must address five concerns:  
1. Design is different from direct action in the world. It has to do with plans on 
paper as its artifact, rather than with the object that might someday be built 
with bricks and mortar in the world based on tho se plans. Interpretation in 
design differs from interpretation of one’s involvements in the world.  
2. Heidegger emphasizes that interpretation is a matter of working out what is 
implicit in the tacit preunderstanding that provides the necessary preconditio ns 
for interpretation. Schön, in contrast, emphasizes the role of discovery, through 
which designers creatively discover surprising consequences of their design 
moves. These two components of interpretation must be integrated in a 
comprehensive theory.  
3. Schön argues that breakdowns in action function as catalysts for interpretive 
reflection. Heidegger also recognizes the role of breakdowns, but he sees a 
break in the references of the situational network of significance as the 
underlying phenomenon. Accor dingly, an adequate theory has to take into 
account the need to repair the network of significance through interpretation, 
and not just to repair the problem with the action.  
4. Heidegger’s example of the craftsman using a hammer may appeal to the ideal 
of the designer as solitary artist, but it conjures up a different social setting 
      Tacit and Explicit U nderstanding in Computer Support                                       148 
  than that of a design team working on a stage in the development of a high -
tech artifact like a lunar habitat. In particular, collaborative design places more 
stress on coopera tion and communication mechanisms than does design by an 
individual. Collaborative design that takes place over decades —as do many 
NASA projects —requires communication among people who cannot directly 
talk to each other.  
5. Heidegger was concerned with the  ontology of interpreted things —what it is 
to be something that is tacitly preunderstood versus what it is to be something 
that is explicitly codified in formalized propositions. His philosophical 
distinctions must be recast as operational mechanisms that can be incorporated 
in computer systems.  
Consideration of these five concerns leads to a more comprehensive and 
appropriate theory of interpretation in design.  
1. From artifacts in the world to artifacts on the drawing board . In common 
sense terms, there s eems to be a world of difference ontologically between artifacts 
and designs. However, in important senses Heidegger treats artifacts in the world 
the same way he would treat design artifacts on the drawing board. That is, he is 
not really concerned with t hem as physically present objects of perception. On the 
contrary, his main effort philosophically is to distinguish artifacts -in-use from 
traditional conceptions of physically -present-objects (as discussed in point 5 
below). For example, a hammer in use is  not understood by the carpenter as an 
observed object with physical attributes, but is skillfully applied to the activities of 
the current situation. Furthermore, this skillful use takes place within the context 
of future-oriented plans and desires, such as the anticipation of the item that is 
under construction. This is similar to components of a design, which are skillfully 
arranged in terms of their relationships to other design components and within the 
context of the anticipated final design. Marks in  a design sketch, for instance, are 
important for their roles within a network of significances, rather than for their 
physical properties as lines. Interpretation of both physical artifacts and designs is 
situated. 
By abstracting from the world of physica l artifacts, designs, in fact, present the 
structure of the Heideggerian situation even more clearly than it is apparent in the 
physical world. Designing can be a way of directly working out the situational 
references that are of interest. Here it is clear  that the designer has created the 
relationships in order to achieve future -oriented goals. That is, in creating a design, 
the designer discloses a network of significance. Within this network, discoveries 
can be made and problems can be uncovered.  
The situation is the context of interpreted meaning within which understanding 
takes place. Normally, this network of significance operates tacitly in the skilled 
      Tacit and Explicit U nderstanding in Computer Support                                       149 
  use of artifacts. However, in design work features of the situation that emerge 
explicitly during ph ases of interpretation can be expressed in the representations 
of the design medium. For instance, the distinction of two independent functions 
within an artifact being designed can be symbolized by distinct graphical icons and 
by separate entries in an is sue-base. Design media provide external memory 
mechanisms for expressing and retaining explicit by -products of interpretive 
reflection, such as conceptual distinctions.  
The fact that designing presents the structure of the Heideggerian situation more 
clearly than other activities in the physical world provides an important 
opportunity for computer support of design. If the design work can take place 
within a computer system that represents the relationships properly, then such a 
system can provide supp ort for the network of significance: for the semantics of 
the design, not just its syntactic outward structure. This opportunity will be pursued 
in Section 5.3, where the model of interpretation is extended to include computer 
support. 
2. From laying -out implications to creative discovery . In the domain of 
design—in which the designer creates the structure of a world —it is particularly 
clear that the discoveries that can take place within the disclosed situation are 
results of the creative activity of the d esigner. Viewed this way, interpretation in 
its literal sense of laying -out (Aus-legung) the implicit meaning is seen to be 
congruent with creative discovery because the structure whose implications get 
laid out is one that was created by the designer. The  interpretation process makes 
discoveries within a creatively constructed context by laying out the implications 
of that context.  
In adapting Heidegger’s philosophy to design it is necessary to consider the 
relationship between Heidegger’s analyses and tho se of the design methodologists. 
In Section 4.3 of Part I, a contrast was made between Heidegger’s and Schön’s 
discussions of breakdown. Figure 4 -6 of that section is reproduced as Figure 5 -1 
with minor changes to show the contrast between their analyses.  
      Tacit and Explicit U nderstanding in Computer Support                                       150 
    
Figure 5-1. Two different theories of breakdown.  
A contrast of Heidegger’s hermeneutic circle with Schön’s theory of reflection -
in-action shows a difference of emphasis. For Heidegger, the implications of the 
disclosed world get laid out; for Schön, cre ative action leads to discovery.  
 
Here it is clear that the two theories are describing much the same process, but 
emphasizing different moments within the cycle of interpretation. Putting aside for 
now (until point 3) the differences in their concepts of breakdown, one can see that 
creative discovery in Schön’s theory plays the same role as disclosure in 
Heidegger’s. For the sake of clarity, this process can be broken into two 
moments—as is done by both Heidegger and Schön. Heidegger distinguishes 
disclosing a world (as a context for things to exist meaningfully within) and 
discovering things (e.g., artifacts, other people, and oneself) within that world. 
With Schön, one can distinguish between creating the design structures and 
discovering surprises within  them. Whatever the terminology, the important thing 
is that both aspects of interpretation be included: (1) the idea of creating a structure 
of significance or a disclosed world and (2) of discovering things within it that 
were implicit but not foreseen o r intended.  
Figure 5-2 shows the model of interpretation in design that is being proposed here 
and in the next chapter. First, the world is disclosed. This disclosure takes place on 
the basis of tacit preunderstanding, and is thus not a beginning ex nihilo but a 
continuation of the hermeneutic circle of understanding. Within this disclosed 
world, creative discovery (as the second moment) reveals discovered things that 
exist in the situation. Surprise discoveries can lead to a breakdown of 
understanding, re quiring the interpretation of new meanings.  

      Tacit and Explicit U nderstanding in Computer Support                                       151 
   
 
Figure 5-2. The model of interpretation in design.  
The rectangles represent stages of understanding within the cycle of 
interpretation. The arrows represent transformations from one stage to another. 
The herm eneutic circle appears at the top of the figure. Below, the basis for 
collaborative design is shown.  
 
The process of breakdown and the other pictured stages will be discussed in the 
following numbered points. In particular, the role of discourse and assert ion as 
transformations related to explicit understanding will be discussed as further 
developments of the laying out of tacit understanding, based on Heidegger’s 
analysis of language in Section 4.3. The fact that understanding can become more 
explicit and be externalized provides the possibility of developing a computational 
medium for externalizing design understanding.  
3. From breakdown in action to repair of situated understanding . The notion 
of breakdown in action plays a rather small role in Heidegger’ s analysis of human 
understanding. As discussed in Section 4.1, Heidegger uses examples of 
breakdown in order to make explicit the network of references among artifacts that 
are only present tacitly under conditions of normal use. Yet, the notion of 
breakdown has been elevated to central importance in the theories that have tried 
to adopt Heidegger’s analysis to a theory of design and to operationalize this theory 
for computer support. Thus, breakdown plays an important role in Schön (1985), 
Winograd & Flor es (1986), Suchman (1987), Ehn (1988), Budde & Züllighoven 

      Tacit and Explicit U nderstanding in Computer Support                                       152 
  (1990), McCall, Morch, & Fischer (1990), Dreyfus (1991), Coyne & Snodgrass 
(1991), Fischer & Nakakoji (1992).  
The fact that so many writers influenced by Heidegger have focused on breakdown 
does not provide multiple independent support for this emphasis. As can be seen 
from Figure 4 -2 in Chapter 4, most of these writers have been influenced by 
Heidegger only indirectly —either through Dreyfus or through Schön. If one looks 
closely at the discussions of breakdown in Dreyfus and Schön, one can note an 
ambiguity in whether they are speaking about a (ontological) breakdown in the 
network of references or a (practical) breakdown in action. Dreyfus is certainly 
aware of the ontological role of breakdown, bu t he is concerned to make his 
presentation acceptable to an American audience, trained in the rationalist 
tradition. For the sake of concreteness, he uses examples that stress the breakdown 
in action. Schön is also aware of the ontological ramifications, b ut he has couched 
his discussion in terms of action (e.g., knowing -in-action, reflection -in-action), so 
it often seems that his examples of breakdown exemplify breakdowns in action 
rather than breakdowns in situated understanding. Given that it is easier t o 
operationalize breakdowns in action than breakdowns in situated understanding, it 
is not surprising that people interested in producing practical results from Dreyfus 
or Schön’s theories would tend to emphasize the action -oriented reading of the 
ambiguou s discussions.  
Breakdowns of action and breakdowns of understanding both call for repair. 
However, the repair of understanding is more complex to support. To repair a 
breakdown in action, it is only necessary to propose a new action. For instance, in 
Chapter 7 a critiquing mechanism in the J ANUS system will be discussed that 
causes breakdowns in designing activities by flagging design constructions that 
violate rules in the domain knowledge. Early versions of this mechanism merely 
displayed a message indica ting the rule that was violated. Thus, if in laying out a 
residential kitchen one located the stove in front of a window then one received a 
message that the stove should not be in front of a window. The repair for this 
breakdown in design action was to mo ve the stove. In more sophisticated 
subsequent versions of the critiquing system, the designer is given information 
relevant to understanding the reasoning behind the rule. Then the designer can 
make a reasoned decision as to how to repair the breakdown. T his is a step toward 
repairing the understanding that led to the breakdown.  
In Chapter 3, a more complex breakdown was illustrated from the transcript of the 
lunar habitat design sessions. Here, the designers recognized that the arrangement 
they had sketc hed in with a bathroom opening onto an eating area was problematic. 
To repair this situation, however, required a reinterpretation of their concepts of 
privacy and of the functionality of bathrooms. This involved consideration of their 
conceptualizations f rom various perspectives (e.g., the European WC) and the 
      Tacit and Explicit U nderstanding in Computer Support                                       153 
  development of new terminology (e.g., the privacy gradient). The repair of this 
breakdown meant a restructuring of the designers’ understanding of the situation, 
perspective, and language. To provide  computer support for such a process would 
necessitate empowering the designers to explore the interpretive network of 
significances they are using, to review alternative viewpoints, and to generate 
innovative conceptualizations through reuse and modificat ion. This would 
necessarily involve representations of the perspectives and language used in the 
interpretation, and not just the graphical representations of objects manipulated in 
the action within the represented design situation.  
To support the repair of breakdowns in the interpretation of the situation, a 
computer system needs to facilitate the representation of interpreted meanings. 
This involves a medium for maintaining externalized expressions of the designers’ 
explicit understandings that emerge fr om their repair of interpretive breakdowns. 
Part III will suggest mechanisms for doing this.  
4. From individual design to collaboration . The representation of explicit 
understanding is not something new to computer support. It is an historical product 
of the development of design from a craft to a technology —from 
“unselfconscious” to “self -conscious” activity in Alexander’s terms. Taking 
Heidegger’s example, a carpenter skillfully wielding a hammer does not need to 
keep in mind conceptualizations having to do with the hammer’s characteristics. 
To use Alexander’s illustrations of unselfconscious design, an Eskimo patching an 
igloo or a peasant selecting colors for weaving a scarf does not explicitly follow a 
theory of construction or aesthetics. People who wo rk by themselves or with 
personal apprentices can proceed without developing systems of explicit rules and 
terminology. Expertise can be passed on face -to-face through concrete 
demonstration. However, when the contexts of skilled activity change rapidly an d 
involve complex social interactions, then design necessarily becomes self -
conscious, requiring theories for understanding, coordinating, and communicating.  
As design becomes increasingly explicit and interpersonal, it becomes an 
argumentative process. As  Rittel described it, design becomes a matter of 
deliberating issues from the perspectives of various stakeholders. Using 
Heidegger’s concepts from Section 4.3, the designers engage in discourse and 
assertion. Discourse  is the formulation of meanings in ex plicit terminology. This 
is integral to the process of interpretation, in which breakdowns in tacit 
understanding lead to repair through explicit understanding. For an individual 
designer, this explicit understanding tends to resubmerge into a modified sta ge of 
tacit understanding in which the former breakdown has been repaired. However, 
in a group design context, the explicit understanding can be expressed in an 
assertion. The assertion is external to the individual and available for deliberation 
      Tacit and Explicit U nderstanding in Computer Support                                       154 
  by others  in the group. Assertion  is the expression of discourse in an external 
medium. 
As indicated in Figure 5 -2 above, the assertion, as an externalized expression, 
serves as a medium for communication among design participants. The 
communication leads to shared  knowledge, forming the basis for collaboration. 
Just as individual design leads through interpretation to the tacit understanding 
needed for further design work, so in collaborative design the shared explicit 
knowledge generated by deliberation on externa lized assertions leads to a shared 
tacit knowledge that provides the preunderstanding of a shared design world. 
Assertion makes it possible for the hermeneutic circle to expand from individual 
understanding of being -in-the-world to shared understanding of social being -with-
others. This extends Heidegger’s analysis of interpretation from individual being -
in-the-world to collaborative design.  
Heidegger and the three design methodologists all recognize the social basis of 
explicit understanding. For Heidegger,  social being -with-others is an important 
constituent of individual being -in-the-world. Alexander sees the emergence of 
self-conscious design as a social phenomenon, tied to specific stages of increased 
societal complexity. For Rittel, deliberation is a so cial activity, essentially 
conditioned by the social roles of the participants. Although Schön often focuses 
on the work of the solitary designer, he is vitally concerned with the social context 
in which the designer acts and in which design practices are taught. They all 
recognize the role of external media of design —whether assertions, patterns, 
debated issues, or reflective categories —both in the work of the individual 
designer and in collaborative interactions.  
The transformation of tacit understanding to explicit understanding via 
interpretation makes possible many developments that go beyond the 
unselfconscious skilled activity of the traditional individual designer. By 
externalizing explicit understanding in the assertions of explicit language, 
possibilities for communication, extended reflection and conceptual formalization 
are all opened up. Communication means that communities of design can be 
established, in which rules of design can be formulated and terminologies 
developed. The externalization of  knowledge also augments the individual’s 
abilities by overcoming the severe limitations of human memory, so that ideas and 
experiments can be brought into contact with other ideas and can be reflected upon 
over extended periods of time. Media of communica tion and externalization also 
encourage formalization. Explicit, externalized assertions can be gradually 
formalized to increase interpersonal clarity and computational power, as discussed 
in point 3. Finally, the externalization of understanding makes pos sible the capture 
of this understanding in computer systems, providing the key to a theory of 
computer support. The assertions that Heidegger discusses are primarily speech 
      Tacit and Explicit U nderstanding in Computer Support                                       155 
  acts in natural language. However, these expressions of understanding can be 
further transformed for use with forms of external memory offered by computer 
technology.  
5. From ontology to computer support . Heidegger’s central concern is 
ontological, to determine the being of things. His discussion of human 
understanding focuses on the dis tinction between artifacts -in-use (ready -to-hand, 
zuhanden ) and the traditional conception of physically -present-objects (present -at-
hand, vorhanden ). Thus, he argues that we normally use things in a tacit, skillful 
way without being explicitly aware of wh at we are doing. This tacit understanding 
may under special conditions (e.g., breakdowns in understanding) become 
explicitly interpreted. However, even when we have explicit understanding this is 
only possible on the basis of tacit pre -understandings that serve as preconditions 
for it. Thus, our ability to have explicit knowledge of physically -present-objects is 
derivative of our tacit skills with artifacts -in-use. The ontological distinctions 
correspond to transformations of our understanding.  
This dissert ation has hypothesized that computer support of innovative design must 
overcome the problem that designers necessarily make extensive use of situated 
tacit understanding while computers can only store and display explicit 
representations of information. This is termed the problem of tacit and explicit 
understanding in computer support of cooperative design.  
The ontological transformation described by Heidegger provides the solution to 
the problem of computer support by indicating the forms into which tacit 
knowledge can be transformed. Heidegger’s analysis of the preconditions of 
understanding stresses that the representations used in computer systems are 
derivative of tacit human understandings and are the products of interpretation 
based on those understan dings. The transformations of tacit to explicit 
understanding will be analyzed in Section 5.3 and will be developed into a theory 
of computer support in Chapter 6.  
5.2. The Social and Human Grounding of 
Interpretation  
This section will locate Heidegger’s philosophy historically in order to highlight 
its contribution. It will show how his analysis addresses the key issues underlying 
a theory of computer support:  
1. Heidegger’s emphasis on the priority of the tacit over rationalist philosophers’ 
stress on the explicit should be understood through a recognition of his place 
      Tacit and Explicit U nderstanding in Computer Support                                       156 
  in the history of philosophy. The view that the world is interpreted —socially 
constructed —and not simply known is a result of modern philosophy.  
2. Tacit preunderstanding is in timately related to the issue of intentionality . This 
issue, in turn, is critical for a theory of computer support, providing the 
ultimate argument for a people -centered approach to computerization.  
3. Given that computer support relies upon the appropriat e application of 
representations to innovative situations, the problem of application  arises as a 
central issue. Gadamer has addressed this issue as integral to Heidegger’s 
philosophy of interpretation.  
4. The problem of application leads to the related an d more general problem of 
relevance , which pervades attempts at computer support for design.  
1. The social construction of reality . The interpretation of Heidegger’s 
philosophy in this dissertation bears directly upon the problem of tacit and explicit 
understanding in computer support of cooperative design. His philosophy makes 
particularly clear the basic ways in which (fundamentally tacit) human 
interpretation differs from (necessarily explicit) computer representation. This is 
in contrast to the rationa list philosophy of functionalism15, which is usually 
assumed to provide a basis for AI. Functionalism proposes that human cognition 
and computer computations share a common functional structure, i.e., that mind is 
adequately modeled as software running on the brain’s hardware. If one reviews 
the history of philosophy leading up to Heidegger, one can clearly see  the roots of 
AI’s belief that computer representations could correspond to the structure of 
human understanding. One can also see that this belief is misleading and based on 
antiquated philosophical positions.  
In philosophical terms, the problem with the traditional AI approach is that it 
assumes that a single interpretive framework can, at least in theory, be formulated 
that will be adequate for all representations within a given domain. That is, most 
influential AI systems define a representation for the  domain of knowledge they 
are dealing with and then proceed to compute solutions to problems in the domain 
by manipulating elements of the representation. In contrast, this dissertation argues 
that problem solving is typically situated in ways which requir e the representation 
of the problem to be interpreted based upon the interpreter’s unique situation, 
perspective, and language.  
 
15 This position was most prominently formulated by Putnam (1967), although he 
has more recently (1988) renounced functionalism and moved much closer to 
Heidegger in the sense that he recognizes the ultimate necessity of founding an y 
formalism upon unformalizable human interpretation.  
      Tacit and Explicit U nderstanding in Computer Support                                       157 
  The assumption that problem -solving intelligence is based on mental 
representations that can be known a priori can be traced bac k to Kant. In his 
Critique of Pure Reason  (1787), Kant argued that the human mind imposes a set 
of elements or categories on sense data in order to understand the external world. 
These elements or categories of space, time, quantity, quality, etc. that Kan t 
derived were claimed to be universal a priori. The idea in AI is to capture such 
objective categories in a representation scheme that could be determined in 
advance to be valid of necessity, in analogy with the example from mathematics 
or physics that wi thin certain geometric domains all objects can be represented 
with Cartesian spatial coordinates. Kant’s approach was revolutionary in that he 
located the source of the objective representations or categories that we use to 
make sense of our world in the h uman mind, rather than in some divine or natural 
order. The objectivity of these categories derived from the view that all minds 
necessarily used the same categories.  
However, Kant’s claim for the universality of our interpretive framework was soon 
criticized by Hegel, who argued that reason evolved through history. In the 
Phenomenology of Mind  (1807), for instance, Hegel laid out the logical stages of 
reason's development in terms of a review of human history. So, for Hegel, our 
interpretation of reality d epends upon the developmental stage reached by reason 
in our times. While there is a logic to the unfolding of reason, it happens 
historically (contingently). Therefore, the appropriate representations for 
understanding things change with socio -historical conditions.  
Marx, in turn, tied this idealist history to the social development of production 
relations in Capital (1867). The basic categories for representing social phenomena 
within capitalist society —private property, exchange value, labor time, etc. —were 
themselves products of the historical development of capitalism and had to be 
interpreted through a hermeneutic process by people living within that society in 
order to avoid ideological conceptualizations. (See Stahl, 1975a, for a detailed 
discussion  of the hermeneutic character of Marx’ method.)  
Subsequent writers in the human and social sciences have shown many other 
aspects of how our representations and conceptualizations of reality are necessarily 
determined by our situation. Freud (1917), for i nstance, related an individual’s 
understanding to the person’s formative history of inter -personal relationships. 
Anthropologists and other theorists show how interpretation is necessarily 
embedded in rich traditions of social, cultural, and personal histo ries.  
Finally, Heidegger (1927) generalized these historical perspectives by saying that 
we always understand from within the situation in which we find ourselves already 
thrown as a result of our past. The social, cultural, and personal traditions are pa rt 
of the background that we bring to interpretation as part of our preunderstanding 
of the world. But Heidegger also added a second important dimension to this 
      Tacit and Explicit U nderstanding in Computer Support                                       158 
  critique of Kant. Our interpretive perspective, he argued, is not simply a matter of 
categories  that can be made explicit and stated in propositions. More 
fundamentally, it is a matter of understanding what it means to be a person and 
what it means for other things to be encountered in the world. This background 
knowledge is fundamentally tacit. It is not only tacit in fact (most background 
knowledge has never been expressed explicitly), but also in principle (tacit 
knowledge is the necessary foundation for having explicit knowledge at all). 
Dreyfus (1985) claims that Heidegger was the first in the h istory of philosophy to 
point out the tacit nature of pre -understanding.  
It is only in terms of our ontological pre -understanding —which can be seen in the 
intentionality of our actions, in our grasp of linguistic meaning, in bodily 
adeptness, and in our i nterpersonal skills —that we can in the first place make 
things explicit and formulate propositional knowledge. Our understanding of our 
world, of artifacts in it, of ourselves, of other people, and of problems we have 
meeting our goals are structured by sk ills, preconceptions, and traditions that make 
up a social construction of reality. From the historical nature of understanding and 
its basis in tacit pre -understanding it follows that understanding develops through 
the hermeneutic circle of interpretation , in which the categories of understanding 
cannot be taken as pre -given but must evolve out of preconceptions, the situational 
context of meaning, and the process of iteratively interpreting the artifacts of 
interest. 
The notion that our perception of real ity is a social construction that fundamentally 
involves acts of interpretation that are essentially structured by our socio -historical 
context has had a profound impact upon contemporary thought and has driven the 
critique of traditional, rationalist outl ooks.16 As Resnick (1991) points out, both 
Mead (1934) and Vygotsky (1978) —two of the most important analysts of the 
social basis of human understanding —proposed that mechanisms of individual 
thought are best conceived as internalizations of ways of intera cting socially with 
other people. Extending the ideas of Hegel and Marx, Mead and Vygotsky claimed 
that to understand the psychological development of an individual one must 
understand the social relations in which the individual has developed and operated . 
Resnick (1991, p.2) concludes, “as Vygotsky (1978) and Mead (1934) have 
independently suggested, social experience can shape the kinds of interpretive 
processes available to individuals.”  
2. The problem of intentionality . Given the complexity and subtlet y of the social 
situatedness of human categories of understanding, the representations proposed 
 
16 The entrenched rationalism of AI is just starting to be subjected to such critique: 
see the collection of articles in Floyd, et al. (1992), based on a 1988 conference 
on Software Development and Reali ty Construction.  
      Tacit and Explicit U nderstanding in Computer Support                                       159 
  for AI systems look primitive and rigid indeed. Even if large amounts of 
commonsense background knowledge could in principle be represented in a 
computer system , as proposed by the CYC project (Smith, 1991), there are three 
major limitations to computer systems carrying out the interpretive tasks 
autonomously:  
* The “background knowledge” for interpretation consists largely of procedural 
skills and ontological un derstandings that cannot effectively be made explicit. 
For instance, people know how to interact with broad ranges of artifacts (e.g., 
specialized tools) and how to behave in cultural settings (which involve 
recognizing the intentions of other people). The y can identify different kinds 
of beings and are able to interact with them appropriately.  
* Interpretation is not an algorithmic process. Although we know that 
interpretations are conditioned by various factors in the situation, we cannot 
say that a certa in interpretation will arise given certain inputs. Interpretation 
seems to be an emergent phenomenon from a holistic context. Heidegger’s 
analysis argues that interpretation is a response to an open -ended set of 
preconditions and situational factors, but i t gives no suggestion of causal 
effects that could be programmed into an autonomous computer system.  
* The problem of intentionality  probably presents the greatest barrier to defining 
an autonomous computer system for interpretation. Searle (1980) convinci ngly 
argues that computer software does not (and never can) understand the 
semantics of what is represented symbolically. Even a thorough cognitivist 
(functionalist) like Fodor (1981) must concede that the symbol systems of 
programs must be interpreted by people. 
One useful way of stating the problem of intentionality is as the “symbol grounding 
problem” (Harnad, 1993). This refers to the fundamental principle of model theory, 
that regardless of the formal syntactic relations among symbols in a model, their  
truth or meaning depends upon a mapping to things in the real world. This mapping 
is not part of the model itself, but is a matter of the human interpretation  of the 
model. Even if one takes a functionalist view of human thought and hypothesizes 
that thought takes place by the manipulation of formal or formalizable symbols, 
one must in addition assume that the thinking person has grounded  the symbols of 
thought in some kind of understanding of their meaning.  
The term intentionality  has the same implicatio n as the term grounding . They both 
indicate that when a person uses a word, sentence, or symbol that refers to 
something, then that person “intends” the thing referred to. In other words, the 
person’s understanding of the word is “grounded” in the thing. V ery few 
philosophers have much idea about how this grounding takes place. Searle makes 
vague references to biology. Marx would locate the grounding in social practice. 
      Tacit and Explicit U nderstanding in Computer Support                                       160 
  Wittgenstein speaks of a “form of life.” For Heidegger (1927 and 1975; see also 
Dreyfus, 1991), the structure of being -in-the-world provides the solution to the 
problem of intentionality. The fact that people are in -the-world in Heidegger’s 
sense means precisely that they have direct, meaningful, semantic access to —are 
grounded in —things in t he world. The situation is the network of the understood 
things with which one is more or less involved. The disclosure of the world as 
preunderstood is what makes interpretation possible. This is very different from a 
simplistic argument that knowledge is  often “in the world” rather than “in the 
head.” Whether we are understanding an artifact in our physical environment or 
one represented mentally, we rely on preunderstandings that are grounded in our 
interpretive situation.  
Computers lack being -in-the-world. They merely manipulate ungrounded 
symbols. As Searle (1980) argued, even if computers are placed in robots that 
move among and interact with things in physical space, they lack intentionality of 
those things. This means that when computers are used in tasks like innovative 
design that involve interpretation, they cannot accomplish the entire task 
autonomously, but can at best support people in the required interpretations.  
Computers lack intentionality. They can only manipulate explicit, ungrounded 
symbols; they have no tacitly -based sense of the semantics of the formal symbols. 
This has been identified in the present dissertation as the fundamental problem of 
tacit and explicit understanding that must be addressed by a theory of computer 
support for in terpretation in design. Suchman (1993) has formulated this problem 
as a lack of access by computers to “semantic resources” and has agreed on its 
centrality. She summarized her book (Suchman, 1987) as an attempt to locate the 
“sense-making ability for mach ines in the limits of their access to relevant social 
and material resources, and identify the resulting asymmetry as the central problem 
for human -machine communication” (Suchman, 1993, p.73).  
The problem of intentionality or symbol grounding underlies th e problem of tacit 
and explicit understanding. The asymmetry in the relationship of people to 
computers —the fact that people have intentional understanding but computers do 
not—means that computers can only support the interpretive processes of people. 
This means that (at least within application domains like innovative design) a 
theory of human -computer interaction should be framed as a theory of computer 
support for (human) interpretation. People’s intentional grounding is, according to 
Heidegger’s analys is, primarily a matter of tacit situated understanding. 
Computers, on the other hand, can only operate with explicit symbolic 
representations. This poses the core problem for a theory of computer support: how 
the computer’s manipulation of explicit symbols  can support people’s 
fundamentally tacit understanding.  
      Tacit and Explicit U nderstanding in Computer Support                                       161 
  3. The problem of application . Decontextualization of knowledge presents 
problems for the subsequent application of that knowledge in new contexts of 
interest. Because hermeneutic theory claims that all interpretation is situated in 
concrete circumstances, the problem of application of knowledge is an important 
issue. In particular, the theory of computer support of interpretation must address 
the question of how the explicit, formalized, and decontex tualized information that 
can be provided by computer systems can be applicable to the human tasks of tacit 
interpretation that this information is supposed to support. For instance, in Section 
3.2 this problem arose in the context of how to apply specific  patterns from 
Alexander’s pattern language to particular decisions in the design of a lunar 
habitat. 
Gadamer (1960) addresses the problem of application as a central issue for his 
hermeneutic theory of interpretation. Although Gadamer is primarily interes ted in 
the human sciences and bases his discussion of application on examples of ethics, 
law, and theology, his characterization of the role of application in interpretation 
has broad generality. Schön (1983) makes similar arguments concerning the 
application of scientific principles in design and engineering.  
Generalizing from his analysis of Aristotelian ethics, Gadamer (1960) concludes 
that application is not a secondary phenomenon of understanding, but an essential 
determinant of understanding as a whole from the start. That is, a textual statement 
in ethics or some other subject matter of interpretation cannot be interpreted in the 
abstract first and then subsequently applied to the situation of the interpreter:  
The interpreter de aling with a traditional text seeks to apply it to himself. 
But this does not mean that the text is given for him as something 
universal, that he understands it as such and only afterwards uses it for 
particular applications. Rather, the interpreter seeks no more than to 
understand this universal thing, the text; i.e., to understand what this piece 
of tradition says, what constitutes the meaning and importance of the text. 
In order to understand that, he must not seek to disregard himself and his 
particular  hermeneutical situation. He must relate the text to this situation, 
if he wants to understand at all. ( p.289 / S.307)  
Granted, historical texts arose within situations that are different from the situation 
of the current interpreter. This is particularly  clear in stories from the Bible or legal 
case law. Here the moral or precedent of the story was originally situated in a 
context that could be removed by thousands of years and vast cultural distances 
from the person who tries to understand it now. But fo r Gadamer, a religious 
proclamation is not to be understood strictly as an historic document, but is to be 
taken in a way that exercises its religious effect upon the interpreter. Similarly, a 
legal case is not simply an historic fact, but needs to be made  concretely valid as a 
      Tacit and Explicit U nderstanding in Computer Support                                       162 
  precedent through being interpreted in a contemporary context. Gadamer claims, 
“The text, whether law or gospel, if it is to be understood properly, i.e., according 
to the claim it makes, must be understood at every moment, in every particular 
situation, in a new and different way. Understanding here is always application” 
(p.275 / S.292).  
The term application  may be misleading because of its rationalist innuendoes. 
Gadamer is not talking about taking a decontextualized meaning and ap plying it to 
some set of particular conditions by somehow adjusting this pre -given meaning the 
way one thinks of applying a scientific law to a practical problem by adjusting 
parameters or taking into account confounding factors like friction. As discussed  
in Section 4.3, according to Heidegger understanding always takes place within 
the preconditions of prepossession, preview, and preconception. Application of a 
text to an interpretive situation in Gadamer’s sense means that the text is 
necessarily interpr eted within the preunderstanding of the current interpreter. This 
preunderstanding includes an anticipation of what the text is all about. For 
instance, if we are reading a text from the Bible, then our background knowledge 
and prejudices concerning the Bi ble come into play. These include the results of a 
long history of biblical interpretation and religious traditions through the ages, 
which has sedimented in our preunderstanding. So, for Gadamer, our “openness to 
the text” always includes placing its mean ing in relation to the whole of our own 
understandings.  
In this sense of application, the problem becomes not one of somehow adjusting a 
pre-given meaning to our circumstances, but of making sure that our 
preunderstanding provides access to the text as som ething that transcends (i.e., can 
surprise) our preunderstanding of it. This is the role of interpretation: to start from 
a preunderstanding and to go beyond it on the basis of it. This involves a process 
of critiquing the assumptions of the preunderstandi ng in terms of the text (as 
revealed by that preunderstanding): “Methodologically conscious understanding 
will be concerned not merely to form anticipatory ideas, but to make them 
conscious, so as to check them and thus acquire right understanding from the  things 
themselves” (p.239 / S.253). This is why interpretation must be a critical reflection 
upon its presuppositions. The restructuring of the network of significance (the 
situation) that takes place in interpretation takes place on the basis of the 
anticipatory preunderstood situation but questions its adequacy in the face of 
discoveries made of the text as disclosed by that preunderstanding. This dialectical 
process of anticipation and discovery —and not some objective viewpoint —
provides the foundation f or the validity of interpretation. Thus, validity and rigor 
of interpretation are situated in the process of application.  
4. The problem of relevance . The problem of application is related to the larger 
question of relevance . Given a task —whether a design task or a task of textual 
      Tacit and Explicit U nderstanding in Computer Support                                       163 
  interpretation —the question arises as to what past experience is relevant to the 
accomplishing of that task. Once the relevant past experience has been selected, it 
can then be applied to the task at hand.  
There are basically thr ee ways a computer system can “know” what information is 
relevant to a given design situation: First, there are often useful heuristics that can 
be programmed into a system for use in strictly delimited domains. Second, people 
can be in control of crucial aspects of the system’s decision making and can use 
their human interpretive powers to determine what is relevant. In this case, the 
computer may be able to provide support for the person’s decisions and it can store 
representations of the decisions for fu ture reuse. Third, the computer can present 
these stored past decisions for a person to approve reusing in the current case.  
In general (excluding the narrowly confined domains where appropriateness can 
be algorithmically defined in advance), the judgment of what is relevant to a 
particular task at hand requires the tacitly -based judgmental skills that require the 
involvement of people. As suggested above, the decision of relevance involves 
carrying out to some extent the process of interpretation in which experiences 
recalled from the past are applied to (interpreted within) the current situation. 
Being based on tacit preunderstanding, this process cannot be carried out in explicit 
computer algorithms. Furthermore, as already discussed, the judgment of 
relevance relies upon an understanding that is intentionally grounded in being -in-
the-world with the artifacts of the current task and of the past experience. Without 
human intentionality and interpretive powers, questions of relevance are 
intractable. The exp licit nature of computerized knowledge means that computers 
may be able to support human judgments of relevance, but they cannot replace 
them. The following chapter explores how computers can support interpretation in 
domains of non -routine design such as lunar habitat design.  
5.3. Transformations of Tacit to Explicit 
Understanding  
Definition of tacit and explicit . In formulating the central problem for computer 
support, it has been repeatedly stated that human understanding is at bottom tacit 
while compute r representations are necessarily explicit. In this claim, the terms 
tacit and explicit have been tacitly assumed to mean something like “unverbalized” 
and “verbally expressed ,” respectively. In order to address the problem of tacit and 
explicit understand ing in computer support of interpretation, it is now important to 
make the usage of these terms more explicit.  
      Tacit and Explicit U nderstanding in Computer Support                                       164 
  The dictionary (Merriam -Webster, 1991) provides the following definitions:  
tacit: expressed or carried on without words or speech; implied or ind icated but 
not actually expressed.  
explicit: fully revealed or expressed without vagueness, implication, or ambiguity; 
leaving no question as to meaning or intent; verbal plainness and distinctness 
such that there is no need for inference and no room for d ifficulty in 
understanding.  
Comparing these definitions, it seems that there is a continuum of verbal 
expression, whose extremes are defined as tacit (not expressed) and explicit (fully 
expressed). The analysis of understanding as a result of the iterative  hermeneutic 
circle suggests that understanding indeed progresses along such a continuum of 
gradual explication. The discussion of the hermeneutic as indicates that what 
becomes explicit in an individual step of interpretation is not a complete 
understandi ng of a whole state of affairs, but rather one particular aspect (the thing 
considered as such and such).  
A taxonomy of tacit and explicit information . The interpretive movement from 
tacit to explicit is only the first of several possible transformations o f 
understanding that Heidegger is interested in explaining. Ultimately, he wants to 
show how the formalized and codified scientific knowledge (which the rationalist 
tradition took as fundamental) is founded in tacit being -in-the-world. Section 4.3 
above summarized Heidegger’s discussion of the role of language in expressing 
understandings. He uses the term discourse  as the basis for verbal expression. 
Discourse does not necessarily mean that an understanding is spoken out loud, but 
simply that it is verbali zed, if only in the mind of the person who understands. This 
qualifies as making explicit. Discourse makes the interpretive step from an 
understanding that has not been verbalized (but can be inferred from a person’s 
understanding of related things or from  the person’s behavior) to one that is 
revealed to the person who has the understanding. So far, the discussion remains 
at the level of an individual person.  
Discourse can be asserted: spoken out loud. This makes it available to other 
people. An assertion produces an externalized expression. According to 
Heidegger’s analysis, assertion can mean pointing out , predicating , or 
communicating . With assertion, shared knowledge is possible through one person 
pointing it out or communicating it to others. Furthermo re, it is possible to codify 
knowledge in canonical forms through predication . This formalizes the structure 
of the knowledge and paves the way for preserving the knowledge in media of 
external memory, including representing it in a computer symbolism. Capturing 
the knowledge in a computer provides a stored representation of the knowledge. If 
the computer system is flexible, this captured knowledge can evolve through 
      Tacit and Explicit U nderstanding in Computer Support                                       165 
  modification of the stored representations for use in computer modeling of 
innovative situa tions. 
 
Figure 5-3. Successive transformations of knowledge.  
The left-hand column lists consecutive forms of information. The right -hand 
column indicates the transformation processes from one form to another.  
 
Figure 5-3 shows the sequence of possible transformations of understanding. 
Moving down the progression, the knowledge becomes increasingly explicit and 
formal. Through this sequence, Heidegger’s theory connects the grounding of 
knowledge in tacit preunderstanding with the potential for e volving computer 
representations of knowledge. This provides the epistemological foundation for a 
theory of computer support for interpretation.  
Each transformation involves a reinterpretation of the informational content in a 
new medium of expression. Thi s entails both gain and loss. Not only is there a gain 
in precision and clarity with the increasing explicitness, but new discoveries are 
made along the way. On the other hand, there is a loss of contact with the 
experiential grounding in the tacitly under stood situation. For instance, when the 
lunar habitat designers first began to interpret privacy in their design, they began 
with a tacit feeling that they had discovered a problem in the adjacency of the 
bathroom to the ward room. This feeling was grounde d in their personal 
experiences (e.g., Desi’s memory of the location of the bathroom at his office) or 
their imaginations of life in the habitat. The tacit preunderstanding of this problem 
was interpreted  in the discourse  of privacy. Then Desi and Archie m ade assertions  
about privacy in the habitat. This externalized their understanding in language so 
it could be communicated. If they wanted to preserve their interpretation, they 
could have predicated  it as design rationale, using some semi -formal or formal  
method such as IBIS. Using a computer support system like HERMES, they could 
then proceed to capture their concern with privacy in a computer representation 

      Tacit and Explicit U nderstanding in Computer Support                                       166 
  that could subsequently be evolved into a useful computer model of privacy for 
future design effor ts. 
Figure 5-4 presents a vocabulary of different forms of information for the theory 
of computer support. All the forms of understanding or knowledge discussed above 
may be considered forms of information . These are divided into the forms of 
human knowled ge (which are hermeneutically grounded in the intentional 
presence of the understood situation) and forms of computer representation  
(formal symbol systems). The taxonomy moves from information forms that are 
appropriate to individuals  to those that form d ata for computer  manipulations. In 
the middle are forms of shared knowledge. They can be shared by several human 
designers, or by designers and a computer system.  
 
 
Figure 5-4. A taxonomy of classes of information.  
 
This taxonomy is meant to provide a vocabulary for discussing a theory of 
computer support founded on the analysis of interpretation as the transformation 
of tacit understanding to increasingly explicit knowledge. A taxonomy draws 
conceptual distinctions. In practice, the categories may be blurred and inter -mixed. 
A designer dealing with privacy while using HERMES with privacy critics already 
represented may be working with an understanding of privacy that synthesizes all 
these forms of information.  
The taxonomy is laid out along the dimension of explicitness. This is not the same 
as formality. Formal information is structural (syntactic); it may be processed by 
computer. Explicitness is a precondition of such formality, not its equivalent. 
Consider for inst ance the semi -formal information of design rationale in an IBIS 

      Tacit and Explicit U nderstanding in Computer Support                                       167 
  format. An issue, stated in English text, may have an answer, also in English. 
The structural relationship between the issue and its answer may be formal in 
the sense that computers can proces s this information algorithmically. At the same 
time, the semantics of the texts of the issue and answer are informal: they 
cannot be processed by the computer, but require human interpretation. 
Nevertheless, all the design rationale information has been s tated explicitly in 
order to be entered into the computer.  
 
 
Figure 5-5. Successive transformations of information.  
 
Successive transformations of tacit and explicit information . Figure 5 -5 
expands the model of interpretation in design (Figure 5 -2) to include Heidegger’s 
three-fold analysis of assertion. At the end of Chapter 6 (Figure 6 -2), it will be 
further expanded to include the transformations of knowledge capture and 
representational evolution. This will provide a model of the theory of computer 
support for interpretation in design.  
Here, the subsequent transformations of assertion have been included in the 
diagram: (i) communicating, (ii) pointing out, and (iii) predicating:  
(i) The externalized expression that has been asserted can be used for 
communication  with other people. This makes possible the shared knowledge that 
forms the basis for collaboration in activities like designing. Understandings that 
have been made explicit in the process of interpretation can affect the tacit 

      Tacit and Explicit U nderstanding in Computer Support                                       168 
  understanding tha t enters into future activity, either directly as part of the 
individual’s understanding or indirectly as a social process involving a change in 
the shared knowledge of a communicating community.  
(ii) Alternatively, the externalized expression can serve a s a pointing out  of the 
object of the underlying intentionality. When something is put into words there is 
a potential that it will become reified and lose its semantic grounding; but the act 
of assertion can be used to counteract this tendency.  
(iii) Moreover, the assertion can take the form of predication , in which the 
reference to the meaning is subsumed in a syntactic formulation. The loss of 
personal relatedness to that which is understood is traded for an increase in the 
intersubjective availability.  Predication leads to the multiple advantages of 
codified knowledge:  
* An increase in the explicitness of the knowledge.  
* A standardization of the formulation in a more canonical form.  
* An increase in the formality of the expression, so that it can more  easily be 
syntactically manipulated.  
* An increased ability to preserve the knowledge in external media.   
These characteristics are essential for the development of scientific knowledge.  
The codified knowledge can be transformed into the logical calculi of formal 
science. Heidegger was interested in this transformation because it allowed him to 
tie scientific knowledge to tacit, commonsense, background knowledge in a way 
that shows that the formal knowledge is only possible on the basis of the tacit. 
This, of course, counters the rationalist assumption that one should analyze tacit 
knowledge as a partial and faulty expression of underlying formal, precise, 
symbolic, intersubjective, or objective scientific knowledge. For Heidegger, the 
successive transform ations of understanding from tacit knowledge to explicit, 
externalized, codified, and formalized knowledge is an ontological transformation. 
Tacit knowledge has to do with our understanding of artifacts -in-use. As the 
knowledge is transformed through expli cit interpretation, externalized assertion, 
codified predication, and formalized calculi, the artifact becomes a physically -
present-object, something observed from an objective status rather than used 
transparently. With this ontological transformation, th e artifact/object becomes 
decontextualized.  
Codified knowledge can also open the opportunity for computer  representations . 
The transformations from tacit preunderstanding to successively explicit forms of 
information provides a basis for the theory of computer support in the following 
chapter. 
 
CHAPTER 6. A THEORY OF 
COMPUTER SUPPORT  
While Heidegger’s analysis of understanding provides the opportunity for a theory 
of computer support of innovative design, his analysis must be operationalized if 
it is to guide the development of useful software systems. This task of 
operationalizing Heidegger’ s categories will be undertaken here, resulting in the 
outline of a theory of computer support for interpretation in design.  
What does it mean for a computer system to support the processes of interpretation 
that designers use in their work? Chapter 6 addr esses a number of the central issues 
of this question:  
6.1. As argued in the previous chapter, a people-centered approach  is needed in 
which designers using software are in control of determinations of relevance, 
application of representations, modificatio ns of reused structures, and other 
matters of judgment that cannot be reduced to computational mechanisms. The 
analysis of interpretation in Part I distinguished three characteristics of 
interpretation: (a) its situated, (b) perspectival, and (c) linguisti c nature. Each 
of these three characteristics involves the modes of (1) reuse and (2) innovative 
modification. Computer software should provide support for each of these 
three characteristics of interpretation in both modes.  
6.2. (a) Experience with graph ical and textual tools for designers has shown that 
computer systems can be useful for capturing explicit understandings of design 
situations . Additional media —including pen -based sketches, pictures, videos, 
and audio commentary —can also be useful for this . With each of these media 
it is important that they be sufficiently expressive to meet the demands of 
designers. Ideally, computer control of the media should not be much more 
intrusive than use of a hand -held pen. The advantage of the computer is that it  
can coordinate representations of the situation in these media in 
computationally powerful ways in order to support the designers’ 
interpretations. (b) One way a computer system can help organize information 
is through systems of perspectives . Each design er, design team, or design case 
can have its own perspective for gathering related information. A general 
      Tacit and Explicit U nderstanding in Computer Support                                       170 
  perspectives mechanism can provide computational support for storing and 
viewing information in categories defined by the designers to support their 
organizational and collaborational needs. (c) Language  is as important a means 
of externalizing design ideas as is sketching. It serves to make the ideas explicit 
and to communicate them, so their problems and opportunities can be 
discovered. A computer -based language facility can help to store and 
communicate definitions and interrelationships of terms. To the extent that the 
language can be processed by the computer, it can serve as a means for 
communicating with the computer and defining or refining mecha nisms of 
control and operation.  
6.3. Plasticity of knowledge representations is critical for offering designers the 
necessary control over the computer system and over their designs. As 
mentioned in the preceding paragraphs, the media, perspectives, and la nguage 
must all be expressive and malleable. This facilitates reuse of previous design 
constructs, because approximate solutions to an innovative need can be reused 
from computer memory and modified by the designer for application to a 
current case. By cap turing past design elements and allowing them to be 
flexibly modified and reused in new designs, the computer support system in 
effect embodies a model of the process of interpretation . Each characteristic 
of the interpretive process is modeled in computer  representations and 
mechanisms: the situation, perspectives, and language. The explicit nature of 
the computer model aids the designer’s reflection, offering objects to make 
discoveries with.  
These issues of support spell out in practical terms the kinds  of mechanisms needed 
to support interpretation in design. These points determine what related systems to 
consider in Chapter 7 and what features to look for in those systems. Then, Part III 
describes H ERMES, a substrate for design environments that implem ents 
illustrative instantiations of these support mechanisms.  
6.1. A People -Centered Approach  
HERMES is a people-centered computer system, designed with the nature of human 
understanding foremost in mind. People and computers have different strengths. If 
one accepts Heidegger’s principles of human understanding and contrasts them 
with traditional AI analyses of computer comp utation, it follows that people 
process information very differently from computers. So if one wishes to use 
computers to support humans doing difficult cognitive tasks like designing then it 
is necessary to distinguish the roles of computer and human care fully and to define 
      Tacit and Explicit U nderstanding in Computer Support                                       171 
  a “cooperative problem solving system” (Fischer, 1989) in which they can work 
together most effectively.  
While much attention has been paid in computer science to the theory of 
computation and to the mechanics of making computers perfo rm efficiently, little 
work has been devoted to a theory of the human understanding that is necessary to 
make sense of computer output and to extend the domain of computer application 
beyond routine algorithmic computations. Computer scientists tend to lea ve the 
analysis of the human partner in human -computer interactions to cognitive 
psychology, which generally ignores Heideggerian ideas in favor of functionalist 
approaches. There have been some notable exceptions to this rule, which have 
provided much of the inspiration for this dissertation and that have covered much 
of the argumentative background that therefore does not have to be detailed here —
e.g., Winograd & Flores (1986), Suchman (1987), Ehn (1988), Budde & 
Züllighoven (1990), Dreyfus (1991), Coyne & Snodgrass (1991), Schön (1992). 
Unfortunately, these exceptions have not included convincing examples of 
software as models for a people -centered approach.  
HERMES is an example of people -centered software. It grew out of a recent 
tradition of domain -oriented design environments (discussed in Chapter 7) that 
tends toward a person -centered approach. This tradition was a practical response 
motivated by breakdowns in autonomous expert system approaches. The present 
dissertation is a reflection on the theoret ical framework implicit in that tradition, 
aimed at repairing the breakdown at the conceptual as well as the practical level.  
The systems that H ERMES evolved from are people -centered in various ways. 
Fischer & Nakakoji (1992), for instance, argue that the JANUS system empowers 
the human designers who use it. Similarly, McCall, et al. (1990) point out that the 
PHIDIAS system allows the use of an open -ended set of domain categories so that 
designers are not restricted to a predefined representation of relatio nships. The 
previous chapter tried to sketch a philosophical justification for these ideas. It 
argued that tasks like innovative design require acts of application and judgments 
of relevance that require interpretive powers and intentionality that come nat urally 
to people but cannot be programmed for computers. A reasonable conclusion to 
draw from this argument is that computer systems for non -routine design should 
be people -centered. 
People-centered software in the sense proposed here is computer software that 
provides information to people and then lets the people make the judgments. 
Rather than incorporating heuristic tricks that allow the computer to make 
decisions that in most cases look like reasonable human judgments, the software 
is structured to inv olve the people using it in a decision -making partnership. The 
partnership is based on the asymmetry in which computers excel at searching large 
information spaces and people excel at making judgments of relevancy. In other 
      Tacit and Explicit U nderstanding in Computer Support                                       172 
  words, designers interpret and c omputer systems like H ERMES support this 
interpretation in design.  
The term “people -centered” is intended to extend the approach of “user centered 
system design” (Norman & Draper, 1986). That was an attempt to view interface 
issues from the user’s perspect ive, not necessarily to include system users in either 
the software design process as in participatory design (Ehn, 1988) or in the 
computational decision -making as in the people -centered approach. User centered 
system design views people as information pr ocessors, not as interpreters; it seeks 
to adjust the software interface to the parameters of human processing 
characteristics at the periphery of the computation rather than trying to support 
human interpretation as the center -piece of the computation.  
The first principle for a theory of computer support that overcomes the problem of 
tacit and explicit understanding is that the software should be people -centered. 
Three further principles are given in the next section.  
6.2. Supporting Situated, Perspectival , Linguistic 
Interpretation  
The analysis of interpretation in Part I suggests that computer support for design 
should:  
(a) Capture computer representations of tacit situated understanding at the points 
when it becomes articulated as explicit interpretatio ns.  
(b) Provide multiple perspectives for analyzing and understanding designs.  
(c) Allow users to evolve and refine interpretive expressions in language without 
starting from scratch or accepting predefined frameworks.  
This dissertation will pursue thes e possibilities. Accordingly, three hermeneutic 
principles will be adopted in trying to develop computer -based environments to 
support the work of designers:  
(a) Provide facilities so designers can create representations of the design situation 
during the process of solving the task.  
(b) Provide facilities so designers can define multiple interpretive perspectives  on 
design problems.  
      Tacit and Explicit U nderstanding in Computer Support                                       173 
  (c) Provide facilities so designers can articulate explicit conceptualizations in 
language expressions for their work and sub merge this new knowledge into 
tacit forms of knowledge for future use.  
These principles will be used to select relevant systems from the literature to 
review. They will also provide a framework for critically evaluating the systems 
in Chapter 7. Then, in C hapters 8, 9, and 10, the design of H ERMES will be 
discussed. H ERMES is a prototype software substrate that extends the functionality 
of the domain -oriented design environments and knowledge representation 
languages that are reviewed so they can support in terpretation. The three 
hermeneutic principles will be used to justify the primary features of H ERMES : 
(a) An extensible computational medium for representing and evolving  artifact 
constructions, design rationale, computational critics, and other forms of  
design knowledge.  
(b) A mechanism for sharing group and personal interpretive perspectives  to 
support collaboration and deliberation.  
(c) A language for explicitly defining  computations  and for hiding information that 
can then function in a tacit way.  
Capturing explicit understandings of the situation . Human cognition is a 
complicated business.  A recent analysis of its structure by Donald (1991) based on 
anthropological, neurological, and linguistic evidence suggests four stages in its 
historical development, all of which remain still active in contemporary cognition: 
(i) episodic memory that is case -based; (ii) mimetic memory that is tacit or gestural; 
(iii) mythic memory that is social and linguistically founded; and (iv) extended 
memory of moder n thought that relies heavily on using external media such as 
pictures, writing, and computers.  Heidegger's (1927) philosophical analysis of the 
logical structure of human being -in-the-world can be seen as a parallel to this 
sequence: (i) there is the preu nderstanding of the world as disclosed to us and of 
meaningful things discovered  in the situation; (ii) through interpretation  we use 
our tacit skills to make things stand out as what they are; (iii) discourse  allows us 
to talk about and thereby share thin gs; and (iv) with assertion we can form 
predications  and externalize our knowledge. In both Donald’s theory of the 
evolution of the consciousness of the species and Heidegger’s theory of the 
development of an individual’s cognitive acts, increasingly expli cit understanding 
emerges out of and on the basis of primordial tacit understandings that remain 
active under the surface.  
A system for computer support of human cognitive activities such as innovative 
design should at least take this complexity into accou nt, recognizing the role of 
tacit preunderstanding at the origin of all true understanding. That is the reason for 
the person -centered emphasis: to keep the intentionality of people in the decision -
      Tacit and Explicit U nderstanding in Computer Support                                       174 
  making loop. Ideally, one would hope to provide support fo r the various levels of 
explicitness that continue to play a role in even the most sophisticated 
understanding. For instance, (i) one might try to provide a computer representation 
of case-based memory to stimulate human episodic memory and intentionality.  (ii) 
Direct manipulation of graphical icons might be used as an analog to mimetic 
understanding. (iii) A language facility for people using the computer system to 
make assertions about objects in the domain in which they are working could 
provide the ingr edients for mythic -linguistic comprehension of that domain. (iv) 
Finally, the computer can provide a computationally active medium that can 
extend human mental abilities by storing and manipulating vast quantities of 
symbolic information.  
The successive tr ansformations of information from tacit preunderstanding to 
increasingly explicit forms of expression result in codified knowledge, as shown 
at the bottom of Figure 5 -5, above. As Heidegger pointed out, this form of 
knowledge provides the possibility of fo rmal science. By the same token, it puts 
knowledge into a state that can be captured for the physical symbol systems of 
computer representation.  
In particular, if a computer system is being used to provide a medium of external 
memory for people, then the r epresentations they are using in that medium are 
available for retention by the computer system for future use. This suggests that 
computer systems to fill this role need to be structured to provide an enticing and 
useful medium in which people will repres ent and solve their tasks. They should 
also be structured to capture representations as they are developed and used for 
future reuse and modification. Given the cyclic nature of interpretation, this works 
well, because the logical source of building blocks  for representing the situation of 
a given task is traditional representations used in the past for representing similar 
tasks. The abstract chicken and egg problem is solved by starting with a seeded (to 
shift the metaphor a bit) database. The seed is, of  course, generated on the basis of 
(real or imagined) previous tasks in the domain.  
In general, what one wants to capture in the database that grows out of the seed is 
a palette of symbols for supporting the various forms of interpretation used by 
people working in the given domain. In particular, it is necessary to support the 
representation of situated understanding . The situation is a network of 
significance. Computer representations of the situation might include icons with 
defined behaviors that are se mantically meaningful to people who will be 
manipulating them. It could also include domain terminology —perhaps structured 
as a semantic network to reflect interrelationships among terms —to help people 
formulate meaningful assertions about their work. For a field like design, it would 
likely include tools for sketching and catalogs of sample designs.  
      Tacit and Explicit U nderstanding in Computer Support                                       175 
  If design is a constructing of reality as argued in Chapter 5, then a computer system 
to support interpretation in non -routine design is a medium to facilitate  such 
construction. The social construction of reality generally —of what we call the 
“real world” we all live in —takes place largely through the mediation of artifacts. 
Design as the design of artifacts (e.g., habitats) is therefore the construction of the  
artifacts through which reality is, in turn, constructed. The computer systems —as 
media for design —construct a reality in which this design can take place. In 
designing approaches (e.g., people -centered) to such systems, one is formulating a 
theory for bu ilding systems (e.g., HERMES), for providing representations (e.g., 
graphical design components, rationale issues), for designing artifacts (e.g., lunar 
habitats), for mediating the social construction of reality. This is an example of a 
high-level design task and illustrates the open -ended character of the tasks that 
human cognition sets for itself and that exceed the capability of the unaided 
individual mind.  
Organizing perspectives on shared knowledge . Complex design tasks require 
collaboration. The desi gn of lunar habitats, for instance, began in the 1960’s and 
may continue for one or more additional decades before the first lunar habitat is 
ever lived in. This design process relies upon many teams of professionals, from 
numerous fields of expertise. The  teams that continue working over long periods 
of time change their membership. Designs pass from team to team, developing 
from requirements documents, to design concepts, to drawings for technical 
reviews, to mock ups, to construction, and so on. The desi gns change and earlier 
stages are iterated. Ideas, explorations, and rationale from one team or one design 
are reused in others or eventually forgotten.  
At one level of analysis, the design of lunar habitats is an unfathomably intricate 
social process invo lving hundreds of people, shifting political priorities, changing 
technologies, financial constraints, and management headaches. But at another 
level, each actual act of designing is ultimately carried out by an individual  person. 
Some concrete individual must make the suggestion that the wardroom table be 
shaped a certain way. Other individuals must either agree with or argue against 
that decision. Each time an individual comes up with an idea or considers a 
proposal, an act of interpretation  takes place. Such acts of interpretation are 
grounded in the interpreting person’s situation, perspective, and language. People 
are necessarily the cognitive atoms of collaborative design because only individual 
people can ground interpretation in intentionality. So th e overall social process is 
dependent upon many individual perspectives  interacting in a process of 
deliberation.  
A computer system to support such social processes of interpretation, involving 
deliberation among multiple perspectives, should provide mechanisms that reflect 
and aid this process. First, designers using the system need to be able to represent 
      Tacit and Explicit U nderstanding in Computer Support                                       176 
  their own ideas and their design rationale. If teams of designers are to use the 
system, then there should be ways for team members to represent their personal 
ideas, sketches, arguments, and conceptualizations. The representations of one 
person need to be kept dist inguished from those of other designers. At the same 
time, design is a collaborative process. The purpose of a design team is to share 
each other’s ideas, to bring different perspectives on a problem together and to 
arrive at a consensus through argumentat ion. A system to support this must allow 
separate definitions, but also facilitate bringing these differing views together and 
resolving the differences. Consensus or resolution may not always be possible, so 
one might also want mechanisms for maintaining minority or competing opinions, 
by means of which it can easily be determined who supports which ideas and why.  
The concepts and design rationale for complex design projects evolve. The 
contents of individual perspectives must be easy to change. In additio n the 
structure of perspectives must be able to evolve fluidly, defining, for instance, what 
shared group perspectives include which personal perspectives, or include which 
particular contents of various personal perspectives. It might be useful to be able  
to chart the history of evolving ideas, establishing “snapshot” versions of designs 
in particular personal or group perspectives.  
The suggestion is that all representations of design knowledge should be stored in 
system-defined perspectives because all in terpretation is situated in perspectives. 
This notion transforms the idea of traditional knowledge -based systems that there 
exists a single body of domain knowledge in the minds of domain experts and that 
there should be a corresponding fixed knowledge rep resentation. Now the 
knowledge represented in the system is (1) always relative to the selection of a 
perspective and (2) continually evolving. The design environment must provide 
tools to support this view of knowledge and to facilitate the evolution of n etworks 
of perspectives and of their knowledge.  
Linguistic tools for collaboration . Language plays an undeniable role in 
collaborative design. Even the individual designer engages in discourse  when 
conducting innovative design. As previously discussed, all  acts of interpretation 
essentially involve explication, which depends upon discourse. Design in teams 
involves the use of language for the deliberation of design rationale from various 
perspectives. Much of the work of teams takes place linguistically thr ough group 
meetings and written reports. These media rely on assertion for the communication 
of ideas. Language forms the basis for the sharing of knowledge, which is the 
hallmark of collaboration. The formulation of understandings in language makes 
possible the formalization of knowledge in methodologically -based systems and 
the representation or capture of knowledge in external media such as 
documentation.  
      Tacit and Explicit U nderstanding in Computer Support                                       177 
  As seen in the videotaped lunar habitat design sessions, the design process relies 
heavily upon conc epts, rules of thumb, and constraints. Each of these can be more 
or less formulated in sentences. To some extent they can even be codified, 
formalized, operationalized, computerized; to some extent they remain tacit, out 
of either necessity or practicality . In providing computer support, it is important to 
analyze the use of techniques like conceptualization, rules of thumb, and constraint 
formulation. One should support the explication of these to enhance their sharing, 
retention, and reuse. At the same ti me, one should recognize that the advantages 
of explicit knowledge are offset by costs in time, cognitive effort, rigidification, 
and loss of intuitive control. Designers may wisely decline to make their 
understanding explicit in many cases. Systems should  encourage a flexible mixing 
of knowledge in the head with knowledge in the machine, of tacit and explicit, of 
intuitive and verbalized.  
When it is deemed desirable to capture knowledge in a computer support system, 
then language can play a major role. Acc ording to the theory proposed here based 
on Heidegger’s analysis, the capture of knowledge is a refinement of the process 
of putting tacit preunderstanding into language. One way to make this process 
explicit and to help people exert control over it is to provide a language facility to 
support the expression of knowledge for computer capture. Because people need 
to relate explicit assertions to their tacit preunderstanding, it is important to tie the 
language facility to people’s natural modes of expression  as much as possible. So, 
for instance, the computer -based language could use terms from the design domain 
chosen by the designers actually using the system. This means having most of the 
vocabulary user -defined and easy to extend or modify. The appearance  of the 
language can be made similar to natural language also, to ease the translation back 
to the level of original discourse in which the intentional content is less alienated 
than in codified and formalized expressions of logical calculii. This can be 
accomplished to some extent by careful design of the syntactic appearance of the 
language facility, keeping this naturalness a priority.  
Linguistic tools to support interpretation and collaboration in design should 
support the interplay of tacit and explici t understanding in the interpretation of the 
language. While it may be necessary to structure an end -user programming 
language in a way that can be used to control the computer like traditional 
programming languages, one wants to avoid the cognitive costs of using these 
languages as much as possible. Although it may be important to include some of 
the basic functionality of traditional programming concerns such as variables, 
recursion, types, control structures, etc., it is desirable to avoid requiring the users 
to keep the associated doctrine in mind. One wants a programming language in 
which most of these structures are kept tacitly behind the scenes most of the time.  
      Tacit and Explicit U nderstanding in Computer Support                                       178 
  At the same time, the user still needs to be able to analyze the structure of the 
representations explicitly and formally (e.g., as a hypermedia node and link 
structure) and have expressions in the language reflect that. For instance, if one 
wants to capture a rule of thumb involving the separation of public and private 
areas in a lunar habit at, then one must think through a scheme for operationalizing 
and representing the notion of privacy that is involved. This is an extension of the 
process of explication that is involved in all interpretation of innovations that are 
not adequately comprehe nded by situational preunderstanding. However, once the 
rule of thumb has been expressed (written) in the language, the explicit 
understanding should be able to resubmerge into a more tacit comprehension. That 
is, when the rule is used in the future —whether by the original creator or by a 
subsequent designer using the system and its language —it should be available 
(readable) in a more tacit way.  
The problem of tacit and explicit understanding pervades the design issues for a 
system of computer support of c ooperative design. The design of a language 
facility for computer support must particularly address this problem because 
discourse is the medium through which one moves back and forth between tacit 
and explicit understanding within the process of interpret ation. 
6.3. A Model of Computer Support  
The goal is to support the situated, perspectival, linguistic character of 
interpretation in cooperative design. This requires plasticity (flexibility, 
malleability, or adaptability) of representation. For each of th e many individual 
designers involved, their situation is somewhat unique. They have different 
trainings, traditions, formative experiences, areas of expertise, skills, priorities, 
interests, motivations, and so on. For each of them to represent what they t ake the 
design situation to be requires a toolbox of representation elements and techniques 
that can be customized to their individual needs. Their different perspectives also 
have crucial commonalities, without which collaboration would be impossible. 
These interrelationships can usefully be modeled in a network of perspectives for 
organizing knowledge representations by individual and group owners. Group 
perspectives need to combine knowledge from multiple other perspectives, 
selectively deleting, modifyi ng, or adding to particular items. The hierarchical 
structure of perspectives must be able to evolve fluidly over time. The language, 
too, must be flexibly expressive so that it can generate innovative locutions. Like 
natural language, it must be capable o f spawning infinite variations and arbitrarily 
complex structures from a manageably finite syntax.  
      Tacit and Explicit U nderstanding in Computer Support                                       179 
  In Figure 6 -1, the schematic of computer support from Figure 1 -1 in Chapter 1 has 
been expanded to depict the dimensions of interpretation as (a) situated, ( b) 
perspectival, and (c) linguistic. The upper -left-hand rectangle, which stands for 
tacit preunderstanding, includes these three dimensions. The figure has also been 
expanded to depict the need for (1) reuse and (2) plasticity of representation in its 
lower portion.  
 
 
Figure 6-1. Computer support for interpretation in design.  
 
The process of interpretation is depicted across the top of this figure. The 
movement of the hermeneutic circle from preunderstanding via interpretation to 
explicit understanding a nd from there via communication to shared knowledge has 
been detailed: (a) The disclosure of the situation leads to discovery. (b) 
Perspectival anticipations move to an appropriate fit of the understanding to what 
has been discovered. (c) The linguistic pr econceptions express themselves in 
explicit conceptualizations. In the realm of shared knowledge, the discoveries can 
take the propositional form of facts, perspectives can become paradigms or 
worldviews, and conceptualizations can be elaborated as theorie s. 
In addition to following the communication path to interpersonal knowledge, the 
externalized expressions of assertion and predication can be captured in a computer 
system. In this case, the representations that capture the codified knowledge can 
provide (a) representations of the interpretive situation, (b) filters for selecting 
knowledge belonging to specific interpretive perspectives, and (c) associations 

      Tacit and Explicit U nderstanding in Computer Support                                       180 
  among related conceptions in a personal sub -language.17 Once captured, this 
knowledge can be store d for future use in the computer knowledge base as models 
of the situation, perspective, and language of a specific instance of understanding.  
Future use is not confined to simply retrieving and displaying frozen knowledge. 
This knowledge is intended to s upport new and innovative design work. While 
even frozen knowledge has an important role to play in reminding designers of 
past solutions, the ability to reuse and modify the past solutions by applying them 
to new tasks is desirable as well. For this, the representations of the situations must 
be malleable, the perspectives should be capable of evolving, and the language 
must be generative. Knowledge can be applied to support interpretive tasks, in the 
sense discussed in Chapter 5, only when the representat ions of knowledge have the 
plasticity to allow them to be adapted flexibly enough to represent innovative 
interpretations.  
The computer process in the bottom part of Figure 6 -1 mirrors the upper loop of 
interpretation. That is, the computer system constitu tes a model of the human 
interpretive process. The three -fold structure of interpretation as situated, 
perspectival, and linguistic is modeled in the ability of the computer system to 
represent these with, for instance, hypermedia, perspectives, and a lang uage as in 
HERMES. The possibility of creating such a model is based in the fact that the 
understanding in the interpretive process can be explicated to the point where it 
can be captured on a computer. This possibility of knowledge capture is added to 
the sequence of successive transformations of information in Figure 5 -5 from 
Section 5.2 to produce an expanded model in Figure 6 -2. In addition, the computer 
support process in the bottom loop of Figure 6 -1 is added as well. (An expanded 
view of the hermeneutic circle from the top of Figure 6 -1 had already been 
incorporated.)  
  
 
17 Wittgenstein (1953) would term these personal sub -languages “language games” 
corresponding to the individual’s “form of life”.  
      Tacit and Explicit U nderstanding in Computer Support                                       181 
   
Figure 6-2. A model of cooperative interpretation and its computer support.  
The rectangles represent classes of information. The arrows represent 
transformations from one cla ss to another.  
 
Now Figure 6 -2 presents a complete model of the theory of computer support for 
interpretation in cooperative design. The information in tacit preunderstanding is 
successively transformed through disclosure, creative discovery, surprise, 
discourse, assertion, predication, capture, plasticity, and evolution. Then it is 
available to support new acts of interpretation by providing candidates for the 
interpreted meaning that is needed to repair situational breakdowns of 
understanding. The many tr ansformations are necessary to produce representations 
that may be truly helpful, given the nature of human interpretation. Of course, the 
final judgment of which representations are relevant and how to apply them 
requires human judgment, based on intentio nal grounding in the world. Such 
grounding cannot be captured symbolically. The computer can only supply tools 
for the ultimately human project of constructing a meaningful understanding of 
reality.  
This model shows the interplay of tacit and explicit und erstanding in the process 
of interpretation. The path of assertion and predication opens up the possibility of 
knowledge capture in a computer system. A properly designed computer system 

      Tacit and Explicit U nderstanding in Computer Support                                       182 
  oriented toward evolution of knowledge and plasticity of representati on can 
provide support for human interpretation in the form of an external medium for 
representing the situation, displaying alternative perspectives, and articulating 
linguistic expressions.  
 
CHAPTER 7. RELATED 
COMPUTER SYSTEMS FOR 
DESIGN  
The theory of computer support in the previous chapter has suggested that systems 
to support interpretation in innovative design should be oriented toward the 
evolution of domain knowledge and should provide for plasticity of kn owledge 
representations. It suggests that such systems should be people -centered and 
should offer —among other things —(a) a computationally active form of external 
medium for representing the situation, (b) a mechanism for displaying alternative 
perspective s, and (c) a language for articulating interpretations. Above all, it 
stresses that such functionality should be implemented so as to support a healthy 
mix of tacit and explicit understanding. This mix is required to support the process 
of human interpreta tion as the explication of tacit understanding. This chapter will 
look at software systems that have been developed to support designers and see 
what techniques they incorporate for meeting these suggestions. These related 
systems provide many of the ideas  that led to the mechanisms, functionality, and 
concerns of the HERMES substrate.  
The approach of this dissertation is within the tradition of situated cognition . A 
number of influential works in this tradition have addressed the question of 
computer suppo rt for design. They are uniformly opposed to the approach of expert 
systems like MYCIN (Buchanan & Shortliffe, 1984) for innovative domains. Rather 
than endorsing systems that automate the decision making process, they call for 
systems that provide media i n which people can exercise their design skills while 
benefiting from computational supports. Unfortunately, these writings have 
proposed little in the way of detailed proposals for alternative software techniques 
to support situated interpretation in desi gn.  
Dreyfus (1972), for instance, makes some high -level suggestions about designing 
software to augment human understanding. But Dreyfus is a philosopher and not a 
computer scientist, so he does not propose any software prototypes. Similarly, 
Schön (1992)  is not a programmer and can, in the end, merely hope that better 
      Tacit and Explicit U nderstanding in Computer Support                                       184 
  work will be put into building “designer assistant” programs than has been in the 
past, rather than into expert systems. The architects Coyne and Snodgrass (1991) 
propose a hermeneutic philo sophic basis for AI, and they too make general 
recommendations along the lines of Dreyfus and Schön.  
Suchman (1987) emphasizes the contrast between rationalist plans and situated 
action. She also stresses the role of language in constituting human interpr etation 
of situations.  But she is concerned with human -computer communication in which 
the computer must understand and act (produce Xerox copies), rather than with the 
computer as external memory or as a medium for shared human cognition.  Instead 
of proposing an alternative programming approach, she fine -tunes traditional 
programs with more hardware sensors of the human situation and with more 
situated testing of the human -computer communication.  
Another forceful critique of expert -system style AI from a H eideggerian 
perspective is presented by Winograd and Flores (1986), who call for a new 
approach to software design.  They note that the computer is ultimately a structured 
dynamic communication medium and they stress the central role of language in 
coordinated action.  They propose the COORDINATOR  program as an example of 
new software as a medium for Computer Supported Cooperative Work. They note 
its limitation: "In many contexts this kind of explicitness is not called for, and may 
even be detrimental" becaus e language is ultimately an "open -ended domain of 
interpretation."  Despite this recognition, they propose software that initially failed 
to be accepted in many social settings because it imposed a rigid, explicit, public 
structure where people often want t o remain implicit. In such cases it did not 
empower personal interpretations because it misjudged the balance between tacit 
and explicit.  
Participatory design, as described by Ehn (1988), is a method for developing 
software in partnership with the end -users, so it can be designed to support skillful 
work and democratic workplace relations, in contrast to traditional automation 
approaches like those reported by Noble (1984).  The idea is to design computer 
tools for experts that support and extend their situ ated skills, including their tacit 
know-how. As an example, the Utopia project worked with graphic layout 
professionals to pioneer a desktop publishing toolkit, as an alternative to the 
automated systems that were putting graphics professionals out of work . This 
toolkit approach may have been innovative at the time, but is now considered 
mainstream. Participatory design proposes alternative approaches to design, but 
offers little in the way of recommended software functionality for supporting 
interpretation . 
The situated cognition literature has not made it clear what kinds of differences the 
alternative theory makes at the level of software techniques. Therefore, this chapter 
must look elsewhere and define its own answer to this question. It will do this by  
      Tacit and Explicit U nderstanding in Computer Support                                       185 
  turning for ideas to two traditions of system building in AI that do provide 
alternatives to expert systems. While these traditions have not produced adequate 
systems for supporting interpretation, they have prototyped mechanisms for 
supporting either tac it or explicit understanding. The traditions to be considered 
are: design environments  and knowledge representations . These “traditions” will 
be caricatured here as distinct and contrasting approaches, although there are 
significant cross -influences and co nfluences.  
To represent the tradition of design environments, a series of systems developed 
during the past several years at the University of Colorado will be reviewed: 
especially JANUS (Fischer et al., 1989) and PHIDIAS (McCall, et al., 1990a). These 
systems provide tools for designers to construct design artifacts and to reflect upon 
them. PHIDIAS and JANUS serve as the particular focus because the development 
of the HERMES system was intimately influenced by them. The tradition of 
knowledge representations will be taken to include a series of knowledge 
representation languages and a series of design rationale capture systems. The 
knowledge representation languages include PLANNER (Hewitt, 1971), CONNIVER 
(Sussman & McDermott, 1972), KRL (Boborow & Winograd, 1977), and PIE 
(Boborow & Goldstein, 1980a). The design rationale capture systems include IBIS 
(Kunz & Rittel, 1970), PHIBIS (McCall, 1987), GIBIS (Conklin & Begeman, 198 8), 
and DRL (Lee & Lai, 1991).  
The caricature of these two traditions consists in taking the design environments 
as systems that support tacit designing and the knowledge representation 
languages as systems for supporting explicit documentation of argumen tation. This 
is an exaggeration, because the design environments include explicit knowledge 
structures and the knowledge representation systems have made efforts to support 
tacit usage. Nevertheless, the major thrusts of these traditions (at least as they are 
distinguished in principle) is usefully characterized this way. Moreover, the real 
question is not simply whether some mixing of tacit and explicit understanding is 
supported, but precisely how that mixture is defined. That is, the previous chapter 
called for support of the movement between tacit and explicit understanding based 
on the particular sequence of transformations of understanding that are outlined in 
the analysis of human interpretation and in the corresponding theory of computer 
support. The  question is how to take the two traditions’ ideas for supporting tacit 
and explicit understanding respectively and to “apply” them in an integral 
approach to supporting interpretation.  
This chapter will argue that the traditions of design environments and  knowledge 
representation languages call for the following functionality to support 
interpretation in innovative design:  
* an external medium for design (Section 7.1);  
      Tacit and Explicit U nderstanding in Computer Support                                       186 
  * perspectives for deliberation (Section 7.2);  
* a language for human problem -domain com munication (Section 7.3).  
Each of these realms of functionality should support the designer’s movement back 
and forth between tacit and explicit understandings of the design artifact.  
While design environments strive to provide tools for doing the design work, 
knowledge representation systems focus on tools for explicating the knowledge —
e.g., as formalized design rationale. They both overlook the importance of the 
dynamic interpretive cycle. Developers of design environments claim that their 
knowledge base s capture rules of the domain, and the design rationale system 
developers ignore the grounding of arguments in human understanding. In this 
way, both groups of systems understate the role of human interpretation. However, 
together they provide mechanisms t hat can be integrated into systems for 
supporting interpretation. This integration is prototyped in HERMES, as described 
in Part III. Systems that properly merge the ideas of the two traditions have the 
potential to be both expressive and usable by exploit ing the synergy of tacit and 
explicit, human and computer.  
7.1. External Media for Design  
Expert systems —which incorporate domain knowledge in a set of explicit 
computational rules and infer solutions to problems in the domain automatically 
from these rul es—do not represent the only approach developed in AI. There have 
always been some researchers who sought ways to use technology to augment 
human problem solving (e.g., Bush, 1945; Engelbart, 1963), rather than to model, 
simulate, or replace it. The charac teristics of design found in the studies of lunar 
habitat design suggest that computer systems for innovative design in such 
exploratory domains should be structured to capture evolving design rationale and 
other design knowledge during actual design proce sses. That is, at critical moments 
during design work the understanding which is normally tacit takes on some form 
of explicit expression, permitting it to be captured in external media or computer 
representations for future use. Computer systems that take  advantage of this can 
support human designers, rather than trying to automate design on the basis of 
heuristics and knowledge representations formulated in advance. The idea is to 
keep the human designers in control, but to extend their ability to reuse k nowledge 
gained in past design work (by themselves or by others).  
There are two difficult aspects to this approach: (1) how to capture knowledge (i.e., 
design concepts, terminological refinements, critiquing rules) without imposing 
      Tacit and Explicit U nderstanding in Computer Support                                       187 
  inappropriate represent ations and without requiring excessive effort, and (2) how 
to retrieve and present to the designers knowledge that has been stored but that is 
now timely and relevant. Issues of design capture and retrieval have been 
addressed by design environments. PHIDIAS and JANUS are prototypical design 
environments, both originally developed using the sample domain of the layout of 
kitchen floor plans. They address knowledge capture by proposing a process of 
seeding, evolutionary growth, and reseeding of the knowledge  base. They address 
timely knowledge retrieval by the use of triggers and critics. These systems will 
be discussed in this section.  
The PHIDIAS design environment.  PHIDIAS18 combines a hypertext issue -based 
information system with a CAD -style construction  kit. The issue -base contains 
issues that are important for designing in the domain, along with possible answers 
to the issues and arguments supporting those answers. The issue -base is motivated 
by Rittel's view of design as an argumentative process (see S ection 2.2). Designers 
can add their own answers and arguments, which can contradict alternatives 
already in the issue -base. The graphical construction kit facilitates the designer in 
constructing a solution to the task at hand. It provides an external rep resentation of 
the design concept with which the designer can enter into dialogue.  
The integration of graphical construction with this textual deliberation is seen by 
the developers of PHIDIAS (and JANUS) as a way of operationalizing Schön's theory 
of reflection-in-action or breakdown -and-repair, in which designers construct, 
observe, reflect, and respond (see Section 2.3). PHIDIAS embodies knowledge of 
its domain in the hierarchy of information in the issue -base and in the palette of 
design items for the construction. Relevant knowledge is displayed through a 
trigger mechanism, which presents issues related to what palette item to select and 
where to place it. The designer can trigger this information by clicking on a button 
during the selection of a palet te item. The designer is free to navigate through the 
hypertext from these displays to explore related issues. The trigger mechanism 
provides the designer easy access directly to the knowledge in the issue -base that 
is most relevant to the current decision  of what to place where.  
A simple query language is also available for displaying information from the 
issue-base. The query language —which is PHIDIAS’ most important contribution 
to the problem of tacit and explicit understanding —will be discussed in Sect ion 
7.3 below.  
 
18 PHIDIAS has undergone continuous development for many years. Most recently, 
it has been re -implemented on top of the HERMES substrate. The version 
discussed here is prior to that conversion and is described by McCall, et al. 
(1990a). 
      Tacit and Explicit U nderstanding in Computer Support                                       188 
  The JANUS design environment. JANUS19 takes a similar approach, with 
significant differences in the details and implementation. Knowledge about kitchen 
design is encoded in the various components of JANUS' multi-faceted architecture 
(see Figure 7 -1): A palette of kitchen appliances provides a  kit of parts for a 
graphical construction  of a layout.  
 
Figure 7-1. The multi -faceted architecture of JANUS.  
The major components of the system (shown in ellipses) each use a different data 
representation. Other components (shown in rectangles) are used to bridge 
between these representations. Designers alternate between problem framing 
(altering the partial specification) and problem solving (altering the graphic 
construction).  
 
Sets of critics embody rules of thumb about the placeme nt of these appliances —
such as that the stove should be near but not next to the refrigerator —and domain 
distinctions  provide a vocabulary for expressing these rules. A specification  
checklist prioritizes client concerns, like whether the kitchen should be  child-
proof. An argumentation  issue-base contains discussions of rationale for kitchen 
design, including deliberation related to the critic rules. There is also a catalog of 
 
19 JANUS has gone through many versions. The most advanced prototype system, 
called KID (Nakakoji, 1993), is the one discussed here. An end -user modi fication 
component was developed in a version called MODIFIER (Girgensohn, 1992). The 
view of JANUS as a communication medium has been stressed in the INDY version 
(Reeves, 1993).  

      Tacit and Explicit U nderstanding in Computer Support                                       189 
  past kitchen designs, which can be used as starting points for new designs or 
illustrations of abstract rules.  
A number of additional components in JANUS are used to link the major 
components together, translating the data representations used in one component 
to those in the other. For instance, the Catalog Explorer prioritizes items in the 
catalog according to the decisions made in the specification, and the 
Argumentation Illustrator displays catalog items that relate to a given topic in the 
argumentation.  
Perhaps the most powerful computation in the system is carried out by the 
Construction Analyzer, which critiques the construction using a set of critic rules . 
These rules can be modified by decisions in the specification as well. For instance, 
if there is a stove and a refrigerator in the construction, then their distance apart is 
calculated and used in rules about minimum and maximum distances. The critics 
“fire” automatically when one of their rules is violated by the placement of items 
in the construction. If the construction does not meet the critic rules, a message is 
displayed alerting the designer to a possible problem. The designer can then view 
the relevant section of the issue -base. Like the triggers of PHIDIAS, the critics of 
JANUS present knowledge from the issue -base that is most relevant to what is 
taking place in the de sign construction, but now as analyzed actively by the system.  
Despite the progress that systems like JANUS represent in meeting the needs of 
designers, they still fall short of supporting interpretation. Consider the forms of 
knowledge in such a system. T he paradigm is still that the programmer who built 
the system obtains pieces of knowledge from books and from domain experts, and 
enters it all in the system. Users benefit from being guided by the knowledgeable 
system (e.g., the critic rules). When design ers want to, they can also explore the 
rationale for critic rules and defined characteristics of the standard appliances. But 
the bulk of the knowledge exists independently of the personal concerns of the user 
or the specifics of the task at hand.  
Recently, an "end -user modification" component was created for JANUS (Fischer 
& Girgensohn, 1990). This allows users to add new appliances (e.g., when 
microwave ovens become popular they can be added to the palette) and to modify 
existing definitions and critic r ules. However, this is not intended as a mechanism 
for continual redesigning of components under alternative interpretations: it does 
not support multiple simultaneous definitions for different users or different 
interpretations. Nor does it provide a medi um for designers to articulate and 
explore innovative interpretive perspectives. The ideal of support for an evolving 
knowledge base requires the ability to partition the knowledge base for alternative 
modifications, but JANUS provides only a homogeneous k nowledge base.  
      Tacit and Explicit U nderstanding in Computer Support                                       190 
  The reliance on standardized components and non -controversial rules of thumb in 
JANUS may work in the realm of kitchen design because this domain is, in fact, 
well-defined and well -understood. Stoves, sinks, and cabinets come in standard 
sizes and raise few issues for the designer. By ignoring broader issues of aesthetics, 
sociability, and architectural interactions with the rest of the building, JANUS is 
free to concentrate on rules that are independent of the interpretive perspectives of 
designers or their clients. For instance, the implemented critics have to do with 
distances between appliances, the size of the work triangle, the placement of the 
sink under a window, or the separation of the stove from the refrigerator. However, 
this appro ach needs to be extended for domains like lunar habitat design that are 
less well understood and less "tame".  
JANUS and PHIDIAS are still like expert systems in their reliance on encoding 
domain knowledge in representation systems that are fixed in advanc e at the level 
of domain representations. They go beyond expert systems in two significant ways: 
(1) they recognize that most interesting design tasks cannot and should not be 
automated so they provide user -centered support systems, and (2) they recognize 
that domain knowledge evolves so they provide user -extensible systems. However, 
if one wants to have a design environment that, for instance, recognizes different 
people's definitions of privacy —and helps users explicate and share these 
definitions —and critiques designs using these multiple definitions, then one must 
extend the domain -orientation of PHIDIAS and JANUS to allow divergent 
interpretive perspectives, as discussed below in Section 7.2.  
In a sense, the idea of a design environment is to open up an  environment, or to 
disclose a world in which designs can come to be. In other words, a design 
environment provides a software model of the design situation, in Heidegger’s 
sense (see Section 4.1). The modeled situation includes the developing design of 
the artifact (modeled by graphical figures), rules of thumb (modeled by critic 
rules), the designer’s concerns (issues in the issue -base), design goals 
(specifications), domain concepts (issue -base distinctions), available parts for the 
design (palette), and  past experience (the catalog of prior designs).  
The theory of human problem -domain communication  underlying the JANUS 
system corresponds roughly to Heidegger’s insistence on the tacit nature of the 
understanding of the situation that is modeled. According to Fischer, et al. (1989),  
To shape the computer into a truly usable and useful tool, users must be 
able to work dire ctly on their problems and tasks. The goal of human 
problem-domain communication is to eliminate computer -specific 
programming languages and instead to build layers of abstraction with 
which domain specialists —such as kitchen designers —can feel 
comfortable . Human problem -domain communication provides a new 
      Tacit and Explicit U nderstanding in Computer Support                                       191 
  level of quality in human -computer communication because the important 
abstract operations are built directly into the computing environment. (p.5 
f) 
The idea is to replace (for the users) general purpose  computer programming 
languages with domain -specific media that represent or model elements of the 
problem-domain situation. Then kitchen designers can communicate their ideas 
about kitchen appliances in terms of tacitly comprehended representations of the se 
appliances (e.g., icons of stoves and refrigerators) rather than by means of abstract 
and explicit statements in an abstract language like LISP.  
In order to turn the computer system into an “invisible instrument” that can be used 
tacitly in this way, F ischer (1989) calls for a layered architecture in which the 
“transformation distance” between the problem domain (e.g., kitchen layout) and 
the underlying system (e.g., LISP) is in effect reduced for the designer by building 
intermediate layers of abstract ion (i.e., the design environment).  
The existence of a series of intermediate layers supports end -user modifiability 
because if a modification is needed at one layer it can probably be made at the next 
lower level, without requiring the designer to descend  to (and understand) the 
lowest level of implementation. For instance, if there is no microwave in the palette 
of the Kitchen Design Environment, then procedures in the Architectural Design 
Environment ( MODIFIER) allow a microwave to be defined.  
Fischer, e t al. (1989) argue convincingly that it is important to relieve designers of 
the burden of “mastering the many details inherent in general purpose 
programming languages” (p.6). Designers have enough to keep in mind without 
learning and applying the complex  knowledge required by sophisticated 
programming languages. However, the question is whether the palette of icons 
offered by JANUS has sufficient expressiveness for creative, professional, 
innovative design. Even with its end -user modification component, t here is only 
limited plasticity in JANUS’ representations. Ironically, use of the modification 
component itself requires at least some knowledge of LISP. The question of how 
to provide adequate expressivity without overwhelming the design task with 
extraneous programming tasks will be taken up in Section 7.3.  
      Tacit and Explicit U nderstanding in Computer Support                                       192 
   
Figure 7-2. A layered architecture  
The design environment provides a layer of abstraction between the problem 
domain and the implementation language, reducing the transformation distance -
1 for the de signer to transformation distance -2. From (Fischer, 1989, p.15).  
 
One way to think about this problem is to ask whether JANUS has gone far enough 
with the layered architecture. There are two major gaps in Figure 7 -2. 
Transformation distance -2 is certainly smaller than the original transformation 
distance-1, but it may be possible to build additional intermediate levels to further 
reduce the average effective transformation. Also, transformation distance -3 could 
be filled in to relieve at least two kinds of problems: (i) the difficulty for system 
developers of building new components and (ii) the fact that end -users of 
MODIFIER are often forced to use LISP to define modifications. HERMES will 
address these gaps by introducing new layers in both of these areas . The 
perspectives mechanism allows designers to build their own hierarchies of layers 
of knowledge between their specific task and the design environment, filling in 
transformation distance -2 with arbitrarily many levels. The HERMES substrate fills 
transformation distance -3, providing high -level functionality for system 
developers to use in building new components and providing a language for 
designers to use in making thei r modifications (see Part III).  

      Tacit and Explicit U nderstanding in Computer Support                                       193 
  Design environment support for interpretation.  A final question must be raised 
during this look at the computationally active media that PHIDIAS and JANUS 
propose for supporting design. To what extent do they support the designers’ 
interpretative  processes?  
The developers of PHIDIAS and JANUS justify their  systems by appeal to Schön’s 
description of design and the process of breakdown. They are anxious to 
operationalize this theory in system mechanisms. In order to operationalize the 
analysis of breakdown, they construe it as breakdowns in action, rather th an the 
underlying breakdown in situated understanding. For instance, McCall, et al. 
(1990a) write:  
Reflection -in-action takes place when action breaks down. There are at 
least two major types of breakdowns. One is when the designer’s action 
results in unan ticipated consequences —either good or bad. The second is 
when the designer is stuck and simply does not know how to act or which 
action to take. To apply Schön’s theory to environmental design we 
operationalized his concepts by dividing design into constru ction and 
argumentation. . . . To support reflection -in-action, the section of the issue -
base relevant to a particular construction task must not be brought to the 
designer’s attention in such a way as to interfere with construction. There 
are two ways thi s can be accomplished: by allowing immediate retrieval 
of this section of the issue -base when construction produces surprising 
side-effects or by allowing such retrieval when the designer is deciding 
how to act. The former strategy is used by JANUS; the latter by PHIDIAS. 
(p. 156f; italics added)  
In operationalizing Schön’s concepts of knowing -in-action and reflection -in-
action, the developers of JANUS and PHIDIAS have squeezed out much of the 
interpretive content. Interpretation —the basis for innovative design —has been 
reduced primarily to a choice among pre -interpreted actions. Rather than 
supporting interpretation, these systems propose alternative actions.  
The innovative interpretive tasks have been replaced by choices among limited 
actions listed in an issue base. Of course, it is necessary to drastically limit the set 
of palette icons and their possible locations in order to make it feasible to supply a 
manageable list of answers for their selection or a computationally tractable set of 
rules for critiquing them. But this restricts design to the level of routine design. It 
allows for more flexibility than automated expert systems because human 
designers are “k ept in the loop” to make the choices among alternative actions and 
because new actions can occasionally be added to the system. However, this 
approach to operationalizing Schön’s theory does not fully support interpretation 
or the repair of breakdowns of i nterpretations.  
      Tacit and Explicit U nderstanding in Computer Support                                       194 
  The triggers of PHIDIAS do provide partial support of interpretation in the sense 
that the issue base that is displayed can include alternative options and rationale 
for them. A designer can explore this rationale and use it to revise his o r her 
understanding of the design situation. PHIDIAS even allows the designer to add new 
options that arise in this deliberation. The shortcoming of this approach is that it 
takes little advantage of the computational power of the computer system. It goes 
beyond a paper system only in the indexing of information for display and linking 
of it for browsing.  
JANUS adds the power of computational critics. Fischer & Nakakoji (1991) point 
to Schön (1983) as the major theoretical influence behind their use of crit ics, but 
then claim to “move beyond Schön’s work”:  
Schön’s framework is based on the cycle of ‘seeing -drawing-seeing.’ 
However, Schön’s notion of seeing is ‘not good enough ;’ as Rittel pointed 
out, ‘buildings do not speak for themselves .’ Non-expert design ers (and 
this is what designers are, in almost all realistic situations) do not have the 
complete knowledge and experience to understand fully the conversation 
with the materials of the situation. Critiquing mechanisms serve as 
‘interpreters ’ that support designers in seeing and understanding the ‘back 
talk’ of the situation. When a critic fires, reflection does not occur on the 
simple basis of the message. Designers ‘listen to’ the design material with 
the help of the interpreter  in the form of a critic (p .27; italics added).  
 In what sense do the critics serve as interpreters? A critic may act as a reminder 
to focus one’s seeing, but scarcely as an in sightful interpreter. The only sense in 
which a critic provides an interpretation of the design situation,  is that it provides 
the abstract, decontextualized interpretation of whoever programmed the critic 
rule. This is someone else’s interpretation, far removed from the designer’s 
situation. The programmer may have been considerably less expert than many 
users in terms of domain knowledge, having expertise in the area of programming. 
Like a knowledge engineer for expert systems, the programmer may have relied 
on generally accepted rules. These rules were then “interpreted” by the 
programmer in the sense of bei ng expressed in a formalism that JANUS could 
execute. They were not interpreted within the context of a concrete design situation 
because they have to apply to all designs.  
The MODIFIER (Girgensohn, 1992) and KID (Nakakoji, 1993) versions of JANUS 
move fur ther toward supporting interpretation. MODIFIER allows a designer to 
modify critic rules and other domain knowledge. However, this feature is intended 
more to support changes in the domain (e.g., the invention of new appliances) or 
in generally accepted do main knowledge (e.g., new rules of thumb or building 
codes), than to support tailoring knowledge to an individual designer, a particular 
      Tacit and Explicit U nderstanding in Computer Support                                       195 
  design case, or a technical viewpoint. In addition to selecting critic rules based on 
the selection of design units tha t are placed in the construction area, KID selects 
rules based on a series of specification questions that the designer answers for a 
specific design project. KID derives “specific rules” by adapting the generic critic 
rules to the choice of specification answers. In these ways, the system of critics is 
tied to the specifics of the construction, the specification, and the evolving 
knowledge base. Furthermore, the critics merely display information which the 
designer can reflect upon; they leave the decision  to the designer.  
Triggers and critics have been shown to be useful, even powerful mechanisms for 
design environments. JANUS and PHIDIAS have recognized the need to support the 
repair of breakdowns in designing. However, their mechanisms fall short of 
offering the necessary support of interpretation. Nor is it a matter of scaling up the 
prototypes, for their approach to operationalizing the concept of breakdown is 
itself the problem. The representations proposed are simply not expressive enough 
to model the  situations, perspectives, and languages of designers in order to 
support their interpretations in more than a partial way. Mechanisms for 
customizing domain knowledge to the situations of individual designers and teams 
are called for (such as the perspect ives discussed in Section 7.2). Also, more 
expressive knowledge representation systems are needed (such as the languages in 
Section 7.3). As shown in Section 10.3, HERMES extends the trigger and critic 
mechanisms with its perspectives mechanism and end -user language to provide 
interpretive critics.  These more fully support the capture, reuse, and modification 
of critic rules.  
7.2. Perspectives for Deliberation  
An adequately expressive system of knowledge representation for supporting 
interpretation in desi gn requires (among other things) a perspectives mechanism . 
This is a conclusion that can be drawn from many of the related systems considered 
in this chapter. The general need to mix tacit and explicit support means that the 
perspectives must be easy (natu ral, transparent, tacit) for designers to select, 
change, create, and merge, while providing an explicit structure (e.g., a browsable 
hierarchy of well -defined inheritance relationships) for organizing alternative 
versions of domain knowledge.  
The systems reviewed suggest three ways in which alternative versions of domain 
knowledge must be distinguished in order to support design:  
      Tacit and Explicit U nderstanding in Computer Support                                       196 
  * Domain knowledge is different in different times and conditions. For instance, 
kitchen design is different on the Earth, on th e moon, and on a space station 
due to gravity and atmospheric conditions. Each of these can be captured in a 
design tradition. Domain knowledge also changes as technology develops and 
as new ideas come along. Design traditions can evolve along multiple 
branches, creating a tree of alternative versions of knowledge.  
* In their work, designers view various aspects of their task or their partially 
designed artifact. There are, for instance, various technical aspects of a design 
(plumbing, electrical, structura l, aesthetic), as well as a wealth of different 
theoretical or argumentative aspects from which to interpret the task. Each of 
these aspects brings different domain knowledge into play.  
* In collaborative design, several people each elaborate their own per sonal 
viewpoints . The individual viewpoints incorporate shared knowledge and also 
contribute to a shared group viewpoint. Much of the detailed work of a design 
team is done by individuals working within their own viewpoints. The 
deliberative processes of g roups then consider ideas from the individual 
viewpoints and create a shared viewpoint that modifies those individual 
viewpoints to provide a basis for continued work.  
Systems for design that do not support interpretation by providing a perspectives 
mechanism in effect proclaim that there is a single body of domain knowledge. 
That is, they make an implicit choice of a tradition, an aspect, and a viewpoint from 
which design is to be carried out. Of course, they may include alternative choices 
in an issue -base or in a catalog of design suggestions, but they do not support the 
designer in making a decision about what tradition or aspect to view things from. 
More importantly, they do not allow the designer to build an individual viewpoint 
and to select what othe r viewpoints to share knowledge from. A perspectives 
mechanism provides the means with which to build alternative versions of the 
knowledge base corresponding to traditions, aspects, and viewpoints. A number of 
perspectives mechanisms to support traditions , aspects, and viewpoints have been 
proposed in the literature. The three classes of perspectives are considered one at 
a time in this section.  
Perspectives for traditions . Recent work on design environments indicates a 
strong need for support of alternati ve traditions. The end -user modification 
capability of JANUS (Girgensohn, 1992) allows designers to add new kitchen 
appliances to the palette and to define new critic rules. This allows for a cumulative 
growth in the represented domain knowledge. But suppose that different designers 
want different definitions of the same critic rule. For instance, they may think that 
the work triangle should be different for residential kitchens, kitchens for disabled 
people, and commercial or industrial kitchens. To support these variations 
simultaneously without causing a proliferation of alternatives  that the designer 
      Tacit and Explicit U nderstanding in Computer Support                                       197 
  must cope with explicitly, a perspectives mechanism would be useful. Such a 
mechanism would allow the development of various traditions of kitchen design, 
like “disabled ,” “commercial ,” etc. Then all the palette items, catalog examples, 
issue-base entries, domain distinctions, and critic rules relevant to a given tradition 
would be grouped together in their own perspective. Section 9.1 presents a scenario 
showing how lunar habitat designers can use HERMES to work with information in 
multiple perspectives for traditions.  
 
Figure 7-3. Growth in total and formalized information.  
From Fischer, et al. (1993c, p.5).  
 
A perspectives mechanism for traditions would facilitate the evolution of the 
knowledge base. Developers of design environments have proposed a model of 
evolutionary growth that mixes tacit and explicit development by means of 
alternating phases of system usage and reseeding (Fischer, et al. 1993c). (See 
Figure 7-3.) They think of the use phases as periods in which knowledge is entered 
in predominantly informal formats (e.g., natural language text). Then, during a 
phase of reseeding of the knowledge base, k nowledge engineers would help to 
formalize this new knowledge, explicating and operationalizing it in, for instance, 
formal (computer interpretable) critic rules. (Shipman, 1993). A perspectives 
mechanism would allow new knowledge to be organized into alte rnative traditions 
by defining perspectives in which to group related information. To some extent, 
the use of perspectives for these traditions would allow users to add their informal 
knowledge within the appropriate perspectives in which they were working , so that 

      Tacit and Explicit U nderstanding in Computer Support                                       198 
  the organization would take place naturally. Section 9.3 describes mechanisms in 
HERMES for supporting knowledge evolution by creating and merging 
perspectives.  
A mechanism for supporting perspectives for traditions was proposed by Mittal, et 
al. (1986) as part of the PRIDE design environment. They called their technique 
“virtual copying of networks.” They noted that in many systems knowledge is 
represented by networks of inter -connected sets of objects. Closely related 
alternative versions of the se networks can be created efficiently by using the 
original network as a prototype and defining alternatives by pointers to this original 
where there are no changes. Only differences have to be represented by new data 
in memory. This “copy -on-write” strat egy is a standard approach in many 
versioning systems, CAD graphics, and even operating systems (Fitzgerald & 
Rashid, 1986). In Pride, domain knowledge is represented in a design net, from 
which alternative virtual copies (of different traditions) are made . Design work can 
then proceed in different versions of the knowledge base:  
Specific designs are created by making a virtual copy of this design net. . 
. . Alternative designs can be explored by making a number of virtual 
copies of a partially completed de sign, and continuing operations in the 
virtual copies. Versioning in this way allows comparison of alternative 
designs, something not supported by all versioning systems. (Mittal, et al., 
1986, p.164)  
Most versioning mechanisms are file based. They can sav e the historical state of a 
design at a given time to a file on disk for later reference. In contrast, a perspective 
mechanism must maintain alternative versions of a knowledge base or of a 
particular design within the design environment, so designers can move from one 
tradition to another. This is achieved by the virtual copying technique. 
Unfortunately, the mechanism described by Mittal, et al. is specific to the LOOPS 
programming language and involves modifying the implementation of this 
language. McCall  (1991/92) proposed a technique for implementing this approach 
to virtual copying of issue -base networks in hypermedia to support perspectives 
for traditions. This proposal has been worked out in the HERMES substrate (see 
Chapter 9).  
Perspectives for aspec ts. Rittel argued that people bring different interests to bear 
on design tasks and view the problems under these different aspects (see Section 
2.2). Deliberation requires the confrontation of arguments made by people with 
these different interests. So Ri ttel’s IBIS and its subsequent versions have put the 
conflicting arguments into one structure where they can be compared. But this 
makes it hard to see which arguments belong together within a common 
perspective. If one wants to suspend deliberation for a while and work within a 
      Tacit and Explicit U nderstanding in Computer Support                                       199 
  commitment to a given perspective, that is not supported by IBIS. The IBIS structure 
also does not represent relationships among perspectives as such  (since the 
perspectives are not themselves represented, but only their elementary arguments). 
Thus, one cannot determine if one perspective incorporates others or modifies only 
particular arguments of another perspective. In HERMES, perspectives can be 
defined to organize any collection of knowledge in the system. Inheritance 
relations can be established among perspectives so that information is virtually 
copied from one to another.  
The discussion of design in Part I repeatedly stressed the importance of viewing 
aspects of a design problem. In Chapter 2, Schön particularly emphasized that 
designers continually move from focusing on one aspect of a design artifact to 
another. In Chapter 3, the aspect of habitability and privacy became determinant 
of the designing —the problem with the NASA knowledge base was that it largely 
ignored this aspect. In Chapter 4, the idea of interpretive perspectives is key to 
Heidegger’s analysis of interpretation; all interpretation, according to this analysis, 
takes place focused on a certain aspect of that which is interpreted.  
It has been exper imentally demonstrated that it is often helpful to consider one 
aspect of a problem at a time. Redmiles (1992) showed the usefulness of this for 
the interpretation of examples in computer programming problems. His 
EXPLAINER  system allows a user to switch b etween several alternative aspects of 
problem explanations: graphical, mathematical, programming language 
representations, etc. The system uses a perspectives mechanism for viewing the 
knowledge base under a given aspect. While the user can select which of  several 
perspectives to view, the choice is limited to a fixed set of perspectives. The 
mechanism here does not allow users to create new perspectives as versions of 
existing ones and modify them in line with their interests.  
KRL (Boborow & Winograd, 1977 )—a sophisticated computer language for 
representing knowledge —provides a more flexible perspectives mechanism. KRL 
is based on the following principles (among others):  
* A knowledge representation language must provide a flexible set of underlying 
tools, rather than embody specific commitments about either processing 
strategies or the representation of specific areas of knowledge.  
* Reasoning is dominated by a process of recognition in which new objects and 
events are compared to stored sets of expected pr ototypes. 
* A description must be able to represent partial knowledge about an entity and 
accommodate multiple descriptors that can describe the associated entity from 
different viewpoints.  
      Tacit and Explicit U nderstanding in Computer Support                                       200 
  KRL provides a syntax for describing things in terms of prototypes  having default 
characteristics (slot values). For instance, a lunar habitat wardroom  could be 
described as a public area, a meeting space, or a large room. In each of these 
descriptions, different characteristics would be specified. Users of KRL can define 
new aspects of things by defining prototypes. This does offer a flexible, extensible 
system for describing things from aspects. However, it is too fine -grained to 
provide a mechanism for organizing systems of perspectives. It allows users to 
view differe nt aspects of a given object but  does not support the defining of 
perspectives which apply to many or all objects, as in HERMES. 
Perspectives for viewpoints.  In the first versions of JANUS, the issue -base 
component was named “Viewpoints .” By this, the deve lopers recognized the need 
to support perspectives for aspects. However, JANUS has never had a mechanism 
for distinguishing or organizing different people’s viewpoints . While the PHIDIAS 
project recognized the need for supporting perspectives for tradition s, neither 
JANUS nor PHIDIAS have considered supporting the perspectives of individuals or 
design teams. As seen in Chapter 9, this is an important use of perspectives in 
HERMES. 
 It is clear that collaborative work in innovative areas involves dynamics am ong 
individual and group perspectives. The SPIDER system (Boland, et al., 1992) is a 
software environment for enriching communication within “learning 
organizations”, i.e., less hierarchical, more network -like organizations able to cope 
with changing tasks , technologies, and environments. The developers of this 
system argue for the importance of mechanisms to support the sharing of 
perspectives:  
The impromptu, ad hoc nature of the understandings the decision makers 
wish to represent requires flexibility in both the representational structures 
made available and in the ways these structures can be created, shared, and 
modified. In creating an environment to foster richness of communication 
through the sharing of perspectives, there are two primary representat ional 
issues to be addressed: 1. What are the structures to be used in the 
formation of a perspective? 2. In what ways and through which tools 
should users be able to present their perspective for their own introspection 
and for the use of others? (p.309)  
They claim that structured decision aid systems like IBIS and DRL, which provide 
powerful representational tools, “orient the user to a mathematical modeling 
paradigm that is neither conducive to flexible, impromptu thinking nor amenable 
to the rich communication between colleagues” (p.310). Rather, what they think is 
needed is a set of mechanisms that allow the user to easily build and modify a 
layered understanding of the situation. SPIDER provides a set of tools to do this 
      Tacit and Explicit U nderstanding in Computer Support                                       201 
  within the domain of organizational management, producing linked networks of 
spreadsheets, graph ical browsers, and textual annotations. These networks are 
considered perspectives. The contribution of SPIDER is to emphasize the need for 
some kind of perspectives mechanism and to stress the importance of making its 
interface easy enough to support taci t thinking rather than just explicit, 
mathematical modeling. Unfortunately, SPIDER is not in the domain of design.  
Perhaps the most concerted effort to represent design alternatives was that of the 
PIE system (Goldstein & Boborow, 1980). Focusing on design  in the domain of 
software programming, the authors of PIE call for a “contexts” mechanism to 
support the flexible examination of alternative designs:  
All designers create alternative solutions, develop them to various degrees, 
compare their properties, th en choose among them. Yet most software 
environments do not allow alternative definitions of procedures and data 
structures to exist simultaneously; nor do they provide a representation for 
the evolution of a particular set of definitions across time. It i s our 
hypothesis that a context -structured database can substantially improve the 
programmer’s ability to manage the evolution of his software designs. 
(p.19) 
The context mechanism in PIE is complicated in two ways. (1) Contexts (which 
support perspectives  for viewpoints) are sequences of layers, where layers are 
saved states (versions). (2) Layers can be saved by the user or by the system. Once 
saved, a layer cannot change, although contexts can evolve by adding new layers. 
The contexts and the layers are nodes in the knowledge representation network 
itself, rather than separate files, so they can be accessed during the retrieval of 
information.  
PIE supports personal viewpoints through the convention that different designers 
place their contributions in se parate layers. Shared viewpoints can be created 
through the merging of two designs in a new layer. The designers of PIE do not 
claim that such a merger is trivial for complex designs. PIE does not eliminate the 
complexity and the need for extensive user in tervention, but “it does provide a 
more finely grained descriptive structure than files in which to manipulate the 
pieces of the design. Layers created by a merger have associated descriptions in 
the network specifying the contexts participating in the mer ger and the basis for 
the merger” (p.5).  
The context mechanism of PIE provides support for perspectives, but at the cost of 
increased cognitive overhead, i.e., a demand for more explicit understanding of 
relationships among contexts. The developers tried a  number of responses to this 
problem through interface features: (1) a way for a user to view two contexts 
simultaneously, with differences highlighted; (2) the use of a metadescription to 
      Tacit and Explicit U nderstanding in Computer Support                                       202 
  specify default selections of contexts for saving and retrieving in formation; (3) the 
option to turn off the context mechanism. They conclude that “all three of these 
strategies have proved useful in some circumstances, but it remains an important 
research goal to make the context machinery available to the user in a conv enient 
fashion” (p.15). This is similar to the approach in HERMES, except that HERMES 
perspectives are less complicated and rigid than the PIE layers. Also, a number of 
system methods have been defined for supporting the merger of information from 
multiple perspectives (see Section 9.2).  
Systems like PRIDE, SPIDER, and PIE have responded to the need to develop 
mechanisms to support perspectives. In each case, they provide a formalism that 
raises and addresses certain important issues of functionality. They also point to 
the difficulty of making it easy (i.e., natural, transparent, tacit) to take advantage 
of the perspectives mechanism. None of these systems has solved the problem of 
how to support perspectival interpretation in cooperative, innovative design  within 
a domain like lunar habitat design. However, all of them have contributed ideas 
for the perspectives mechanism in HERMES (Chapter 9).  
7.3. Languages for Human Problem -Domain 
Communication  
As discussed in Section 7.1, a central thrust of design envi ronments like JANUS is 
to eliminate the need for designers to “master the many details inherent in general 
purpose programming languages” (Fischer, et al., 1989, p.6) by supporting “human 
problem-domain communication.” For example, JANUS provides a palette  of icons 
that represent key objects in the problem domain of kitchen design. These icons 
can be manipulated tacitly with a mouse, with no need for the designer to express 
decisions in an explicit programming language. Similarly, the designer views 
discussions in the issue -base and messages from the critics in natural language 
statements that are formulated in the language of kitchen design, not that of 
computational operations.  
However, it has also been noted that this kind of human problem -domain 
communic ation is insufficiently expressive for supporting interpretation in 
innovative, cooperative design. This section will discuss three arguments for 
supplementing human problem -domain communication with some form of 
programming language: (1) Recent versions o f JANUS have come up against the 
limit to expressivity in various ways that call for an end -user programming 
language. (2) PHIDIAS and other systems have successfully incorporated end -user 
      Tacit and Explicit U nderstanding in Computer Support                                       203 
  programming languages to different degrees. (3) Discussions of know ledge 
representation languages provide strong arguments for the utility of general-
purpose programming languages for communicating with the computer more 
flexibly. Once more, the point is to find the right mix of tacit and explicit support. 
It may be neces sary to include an end -user programming language within design 
environments for designers to use in extending the current vocabulary of human 
problem-domain communication. However, the need to use that language should 
be minimized to where it is truly nece ssary to express things explicitly. 
Furthermore, the structure of that language itself should be designed to promote 
tacit usage as much as possible, in order to minimize the number of details of the 
language that must be mastered.  
Increasing expressivity.  The need for increased expressivity of communication 
in design environments is greatest when it comes to modifying existing knowledge 
representations. As long as one can express one’s ideas adequately with the given 
representations (for instance, the defi ned palette items, domain distinctions, critic 
rules), there may be no need to go beyond them. This follows from the analysis of 
interpretation: explication is triggered by breakdowns in one’s understanding. 
Only when the nexus of signification of one’s cu rrent tacit preunderstanding is 
inadequate for the understanding of something is there a need to make one’s 
understanding more explicit. However, when one’s understanding does have to be 
extended innovatively, then one needs linguistic resources to make th ings explicit. 
The degree to which things must be made explicit and the length of time for which 
they must remain explicit before being resubmerged into a revised tacit 
understanding depends on the particular circumstances. It is the same with 
interpretati on within a design environment (which is, after all, a model of the 
designer’s understanding). When the current representation is inadequate, there 
must be a way of analyzing that representation more explicitly, modifying its 
structure or significance, and  then re-submerging the new representation in a form 
that can once more be used tacitly.  
The end-user modification component of JANUS (Girgensohn, 1992) failed to 
provide a smooth transition to the explication of palette items and critic rules that 
needed to be modified. It provided extensive interface support for creating new 
representations in the form of examples, context -sensitive help, checklists of 
required steps, and even critics of the modification process. But it provided no 
means for explicating e xisting tacit representations short of the LISP code of their 
implementation. For non -programmers, LISP does not offer a graceful transition 
from human problem -domain communication. Moreover, although this version of 
JANUS was completely rewritten to suppo rt end-user modification, it’s structure 
severely limits the scope of possible innovation, even using the power of LISP. This 
is because it is not designed to make use of an end -user programming language to, 
      Tacit and Explicit U nderstanding in Computer Support                                       204 
  for instance, define critic rules that are signi ficantly different from the existing 
seeded rules. As Girgensohn (1992) writes:  
The representation of critic rules in JANUS proved to be difficult to 
understand for many of the subjects in the user studies. Especially the 
applicability condition that relat es a critic rule to descriptions of design 
units such as (Cooks Self Food)  was a source of problems. The 
LISP-like format of descriptions and the use of keywords such as Self 
was a part of these problems. A representation has to be found that is more 
familiar to users such as natural language and at the same time constrained 
so that the system can reason with it. Another source of confusion was the 
mechanism for specifying how many combinations of design units had to 
be tested. For example, a stove has to b e near to only one refrigerator, but 
it should be away from all windows . . .. A related problem [is] that critic 
rules [to] check for the absence of design units cannot be formulated in the 
current representation. For example, it is impossible to check whe ther a 
kitchen has a door or whether the window area is at least 10 percent of the 
floor space. Stahl (1992) proposes to tackle problems of this kind by 
formulating critic rules with a natural -language-like query language in 
which the user can formulate qu eries. (pp. 79f)  
This statement lists some of the kinds of issues that an adequate end -user language 
would need to be able to express: applicability conditions, self -reference, 
combinatorics, absence of units.  
There is no reason why these issues could not  be stated in a format more natural to 
designers than abstract LISP syntax—particularly since LISP itself is designed to 
build up more application -specific languages. As suggested in this quotation, what 
is needed is a language that can represent the expli cit relationships that are implicit 
in the tacitly used critic rules and design units in a way that makes sense both for 
the designer and for the computer. The HERMES language (discussed in Chapter 
10) tries to do just this. It builds up an end -user langua ge for defining critic rules 
and other design knowledge in formulations which are as close as possible to 
domain terminology. Through the generality of its syntax, the HERMES language 
permits designers to define a much less constrained set of critics than those in 
JANUS. 
A similar limit to expressivity is found in X -NETWORK (Shipman, 1993). This 
design environment employs agents to “search for information with certain 
attributes within the system and perform operations based on what, if any, objects 
they locate. Agents consist of a trigger, a query, and an action” (p.32). By  basing 
the agents on queries of the current database, the system allows all actions and 
displays to be dynamic. The power of the agents is largely determined by the 
      Tacit and Explicit U nderstanding in Computer Support                                       205 
  expressivity of the queries, which determine what kind of information the agents 
can respo nd to. In particular, if a designer wishes to modify the way a given agent 
is operating, the designer is dependent upon the expressivity of the query 
expressions for extending or innovating the agent behavior.  
Currently, the queries in X -NETWORK (Shipman,  1993) are limited to the 
specifying of a conjunction of attributes:  
The query defines the information that must be located before the agent 
will execute its action. The query definition area within the agent editor is 
similar to the property sheet used to attach attributes to objects in the 
information space. This interfac e limits the expressiveness of the query to 
the location of objects matching attribute patterns but allows for the 
transfer of skills acquired in using the property sheets. Use of a more 
powerful query language based around a hypermedia model, such as that  
found in HERMES (Stahl, this dissertation), would allow greater 
expressiveness but with the added cost of the users being required to learn 
the syntax and semantics of the formal language. Beyond such traditional 
query mechanisms, query definitions should  also be allowed to use built -
in primitives that do complex analysis (p.34).  
An end-user language such as that in HERMES could express more than 
conjunctions of attributes without requiring a forbidding syntax and semantics. It 
could also include primitive s for the complex analyses mentioned. As noted in this 
passage, the concern is with the trade -off between increased expressivity and 
mounting cognitive overhead. The ideal would be to partially end -run this trade -
off by minimizing the cognitive overhead th at comes from making things explicit 
by keeping even the use of the language as tacit as possible.  
Incorporating end -user programming languages.  PHIDIAS (McCall, et al., 
1990a) incorporates a query language for its issue -base. That is, the issue -base 
consists of a hypertext network in which each issue, answer, or argument is a 
distinct node connected with labeled links. In order to display part of the issue -
base, PHIDIAS evaluates a query. Thus, if issue -234 is “What should be the location 
of the refrigerat or?”, then the issue -base discussion of the proper location of the 
refrigerator would be generated with the query:  
issue-234 with answers with arguments  
The PHIDIAS query language began in an earlier version named MIKROPLIS 
(McCall, 1989). This was primari ly a system for constructing and using issue -bases 
for designing. It was based on McCall's (1987; 1991) variant of Rittel's IBIS: 
Procedurally -Hierarchical -Issues (PHI). A PHI issue-base consists primarily of 
issues, answers, arguments, and resolutions con nected by links based on the 
      Tacit and Explicit U nderstanding in Computer Support                                       206 
  "serves" relation. PHIQL, the PHIDIAS Query Language was developed to meet the 
needs of someone using a PHI issue-base. Its primary use was to display subtrees 
of the issue -base hierarchy, such as:  
answers of subissues to issu e-105 
answers of issues with arguments  
issues containing "doorway"  
The original PHIQL language was based on a number of observed regularities in 
the formulation of queries in natural language. It was hoped that by incorporating 
these patterns of natural la nguage in the computer language it would seem more 
natural and "English -like" than existing programming languages. In particular, it 
was noted that the procedure of following links of type L from node N was 
expressed by the phrase L of N in English. N was considered to be the subject of 
this expression and L to express a relationship  applied to that subject. Successive 
relationships (i.e., link traversals) could be applied by adding additional phrases to 
the front of the query: L3 of L2 of L1 of N . Various conditions, such as 
containing a given substring, could follow the subject (McCall, 1989). By means 
such as this, a query language was defined with a simple syntax that could be easily 
parsed and that appeared English -like. The Mikroplis User Manual  (McCall, et al., 
1983) noted:  
The Mikroplis command code is similar to natural English. It is, however, 
a code, and as such must be learned and followed. The intention in 
imitating natural language —for instance, the fact that a variety of 
prepositions and articl es is allowed, or that the syntax generally follows 
the subject/predicate conventions of English —was to minimize learning 
effort and to essentially eliminate the kind of opaque codes often found in 
other command sets (n. p.).  
A number of limitations were i mposed to maintain the workability of this 
approach: issue, topic, and document nodes had to have standardized names like 
issue-123; other nodes could not be direct subjects of a query; and the syntax 
was kept simple.  
Query input was done through a prompt ed command line interface, so users simply 
typed in the query like a sentence. Incidental words like articles and prepositions 
were allowed but  ignored by the parser. Users could think about the information 
they wanted in the same terms that PHIDIAS accepted as a query. This made the 
query language easy to learn and to use. In proposing to use PHIQL for defining 
queries in virtual structures, McCall (1990/91) continued to emphasize the 
English-like character of the language:  
      Tacit and Explicit U nderstanding in Computer Support                                       207 
  PHIQL is a highly English -like language which has been in use by end users 
for more than six years. This experience has consistently shown PHIQL to 
be learnable within a single day —often within an hour . . .. Though it 
appears purely declarative to end users, PHIQL is in fact an applicati ve 
(functional) language . . . [yet] statements in PHIQL almost always appear 
to be ordinary (declarative) English expressions. (p.6)  
McCall (1990/91) proposed extending the original PHIQL to help make PHIDIAS a 
viable alternative to expert systems. This proposal focused on adding the 
functionality of virtual structures, that is expressions in the query language 
embedded in hypertext nodes. When a node that has been defined as a virtual 
structure is evaluated, it returns the results of the embedded query in place of its 
textual contents. This mechanism was seen as a way of embedding computational 
power in the very nodes of the hypertext database. (See Appendix B for a 
discussion of how this idea has been develop ed in the HERMES language.)  
To give significant inferencing power to virtual structures, the PHIDIAS query 
language needed to be extended to include several new operations. The technical 
section of the proposal (McCall, 1990/91) detailed the planned modifi cations as 
follows: 
1. Addition of comparison operators: PHIQL now only uses substring 
matching. It will need other comparison operators, including >, <, and =.  
2. Addition of existential and cardinal (numerical counter) quantifiers: 
These will allow queri es which ask for such things as nodes having no 
children. 
3. Addition of negation operator (“not”).  
4. Addition of a true "if" statement, so that conditional queries can be 
stated more naturally.  
5. Addition of capability for conjunction of conditions.  
6. Addition of capability to compare the contents of a pair or more of 
retrieved nodes. This will allow the comparison of user -input nodes, 
whose contents cannot be known in advance by the system (p.7).  
These extensions were implemented in an initial version of the HERMES language. 
They were tested by developing an application in the text -based domain of 
academic advising. This domain was chosen because it took good advantage of the 
inferencing capability. It also provided a basis for comparison with a hyperte xt 
system lacking inference (Peper, et al., 1990) and with expert system approaches. 
This version of the language is reported on by Stahl, et al. (1992). Appendix A 
      Tacit and Explicit U nderstanding in Computer Support                                       208 
  reports on a programming walkthrough of this language and Appendix B discusses 
the academic  advising application.  
To support a wide range of inferencing, the language had to be extensively 
expanded to include true/false conditionals, numerical calculations, comparison 
operations, and nesting of phrases. A typical request in the new language —taken 
from the test domain of academic advising —might look like the following:  
courses of sandra that have studio_types and that also have 
less than 3 prerequisites, with their prerequisites.  
To evaluate this statement, the system would navigate from the stud ent node, 
sandra, across all its courses  links; check which nodes arrived at had at least 
one studio_types  link and also had less than three prerequisites  links; 
and output a list of the course nodes that satisfied these conditions, along with a 
sublisting  of their prerequisites. Here is the output:  
***COURSES:  
1. ENVD 2110 Architectural Studio  
  *** PREREQUISITES:  
  1. ENVD 1000 Environmental Design Studio  
  2. ENVD 1014 Intro to Environmental Design  
2. ENVD 2120 Planning Studio  
  *** PREREQUISITES:  
  1. ENVD 2110 Architectural Studio  
The structure of statements in this language and their method of evaluation are 
based on the structure of hypermedia. The queries investigate the node and link 
structure, rather than the content of a relat ional database, and their evaluation 
proceeds by navigation across the links from initial nodes. In this sense, the 
research represents an effort within the hypermedia paradigm. The thrust of the 
effort is to exploit hypermedia mechanisms to achieve certai n functionality of 
artificial intelligence and information retrieval technologies. Thus, the goal was to 
expand hypermedia to include:  
* Some of the inferencing capability of PROLOG, but without the comprehension 
difficulties of predicate calculus and exp licit variables;  
* Some of the querying ability of SQL, but applied to an object -oriented, 
hypermedia database;  
* Some of the advantages of semantic databases, but allowing semantic 
relationships to be defined between instances as well as types by labele d links; 
and  
      Tacit and Explicit U nderstanding in Computer Support                                       209 
  * Some of the utility of semantic networks, but without restriction to a pre -
defined set of link types or to semantic relationships.  
The PHIDIAS query language illustrates a number of important principles: (1) It 
shows one approach that has proven successful for defining an end -user 
programming language that minimizes the cognitive overhead by modeling its 
syntax and semantics on that of natural language. (2) While the syntactic structure 
of queries follows a standard subject/predicate order,  the vocabulary of terms is 
taken from the problem -domain (e.g., the node names and link types for issue -base 
queries are user -defined). (3) Moreover, the vocabulary is easily extensible by the 
users, so they can develop terminology for expressing their in novative 
interpretations of the structure of the issue -base. (4) The advanced version of the 
language includes logical and computational operations for specifying complex 
conditions. (5) Additional computational primitives can be included that would be 
useful in a design environment for a specific domain. (6) The language is based on 
the hypermedia structure of the database that it queries and expressions in the 
language can be incorporated in the nodes of the hypermedia as virtual structures.  
The HERMES language is based on the PHIDIAS query language. It significantly 
extends the computational power and flexibility in order to support interpretation 
in design. It retains the idea of a constrained syntax, that made the PHIDIAS 
language easy to use, and it p rovides additional interface supports for its much 
larger syntax. However, the HERMES language moves away from the “English -
like” emphasis in PHIDIAS as a result of issues that arose in programming 
walkthrough evaluations of intermediate forms of the langu age. Rather, the 
HERMES language normally hides much of the computational details to support 
tacit usage while allowing users to make the structure of expressions more explicit 
as needed for modification and interpretation.  
The PHIQL language suggests the possibility of including an end -user 
programming language in a design environment. Such languages have proven 
useful in other computer applications. Many commercial products like CAD 
systems, spreadsheets, word processors, database management systems, 
MATHEMATICA, and HYPERCARD include macro languages, scripting languages, 
or end-user programming languages. While these languages are not always easy 
for non-programmers to use (Nielsen, et. al., 1991), they often provide a middle 
ground between canned applica tions and programming environments in which 
non-programmers can gradually learn to customize operations and local 
developers or local -site super -users can help people go beyond the limitations of 
standard applications (Nardi & Miller, 1990).  
Another advant age of a language for design environments is to integrate the 
knowledge representations of various components. Even if some effort is involved 
in learning to use the language, if the same language applies uniformly to many or 
      Tacit and Explicit U nderstanding in Computer Support                                       210 
  all of the system’s components  then once it is learned it provides the power to 
modify and extend all knowledge in the system. The language can impose a unity 
on a complex system. For instance, the KID version of JANUS is the most multi -
faceted implementation of that system, with many components and linking 
subsystems. The developer of KID has remarked that “now that all these 
components have been prototyped with different knowledge representations it is 
time to integrate them with a unified substrate, and the HERMES language would 
be a great way to do that.” (K. Nakakoji, personal communication, June 7, 1993.)  
Of course, the inclusion of a language does not change a design environment’s 
knowledge representations, but the decision to use a language across components 
imposes a design con straint that favors an integrated system built on a consistent 
knowledge representation . Part III discusses the role of the language in the 
HERMES integrated substrate.  
Communicating more flexibly with the computer. For a design environment 
that is central ly built around an end -user language, the design of the language and 
the design of the knowledge representation are intimately linked. The developers 
of the design rationale language, DRL (Lee & Lai, 1992), for instance, point out 
that “a large body of res earch in the last two decades or so points to the importance 
of choosing the right representation for a given task (e.g., Brachman & Levesque, 
1985; Winston, 1984). The task of using and reusing design rationales is no 
different.” They argue that the commo n perception that the capturing of design 
rationale is not worth the effort may be based on a representation problem. It may 
be that a different representation system or language would allow people to 
represent more easily what they want to represent in a way that can provide 
significant benefit.  
Many research programs in AI have concentrated on designing knowledge 
representations and languages that had maximal computational power based on 
formal schemes. Only afterward did they attempt to add a user -friendly interface 
facade. However, it may make more sense to start out from an effort to design a 
language oriented toward tacit understanding and then to gradually extend its 
computational power, always keeping in mind its usability. Systems like KRL, PIE, 
and DRL demonstrate the importance of sophisticated programming languages in 
knowledge -based systems. However, they require a high level of explicit, abstract 
analysis to use. The PHIDIAS Query Language, in contrast, proved to be rather 
natural to use, but it  had limited power.  
The ACE project took the alternative approach to combining computational power 
with usability by starting with a consideration of how to empower non -
programmers and then worrying about formal computational issues. The ACE 
developers stu died the programming language needs of end -users and local 
developers, and attempted to develop end -user languages for them. This resulted 
      Tacit and Explicit U nderstanding in Computer Support                                       211 
  in ACE, an Application Construction Environment (Johnson, et al., 1993). ACE 
provides a set of frameworks for defining application -specific programming 
languages. These languages allow end -users and local developers to extend the 
functionality of applications by adding behavior to their systems without their 
having access to sourc e code and without recompilation (p.47). ACE adopts the 
model of spreadsheets, by focusing on a well -thought-out set of primitives and 
avoiding complex explicit control structures, such as “for” loops and recursion. 
Thus, it goes beyond the superficially u ser-friendly style of HYPERTALK, which 
requires iterations and conditionals to be explicitly expressed rather than being 
implicit in application -specific operators. ACE is intended to “foster a methodology 
more like that fostered by spreadsheets. It puts u sers at the center of the 
development process” (p.53). That is, users are seen as the primary implementors 
of applications; they assemble the main components of their application and get it 
working. To support this, users are supplied with application comp onentry in the 
form of reusable, extensible software libraries, and components are self -describing 
so that new ones can be easily added to the system.  
The HERMES language adopts much of the ACE approach, starting with a 
consideration of the user’s (interpr etive) needs. The HERMES language provides a 
computationally active medium in which designers can build up their own 
behaviors and supports. Systems of defined language expressions can evolve, be 
organized in perspectives, and be shared by different design ers of different skill 
levels. 
Programmable design environments.  The idea of combining design 
environments with the approach of programmable applications (Eisenberg, 1992) 
has been explicitly proposed by Eisenberg and Fischer (1992). They motivate this 
combination on pragmatic grounds, hoping to integrate the best features of each 
approach and overcome their respective weaknesses. While they do not address 
many of the issues that arise in actually implementing a programmable design 
environment, they recogni ze the advantages of extending a direct manipulation 
system with an appropriately designed end -user language. HERMES can be seen as 
a first instantiation of the idea of a programmable design environment, moreover 
one that is motivated by principles of huma n understanding.  
The system suggested by Eisenberg and Fischer (1992) consists of two 
independently conceived halves (as mirrored in the structure of the paper, which 
discusses the notions of programmable applications and design environments 
separately, an d then worries about their interactions). However, the indications are 
already present in their discussion that the attempt to implement such a system 
would lead to an integrated approach, as it did in HERMES. For instance, they 
suggest that “the programmi ng environment ‘half’ of the application should be 
constructed around a domain -enriched language (which might be a newly -
      Tacit and Explicit U nderstanding in Computer Support                                       212 
  constructed language or an application -specific ‘dialect’ of some existing general -
purpose language)” (p.81). This distinction between a new language and a dialect 
of an existing one underestimates the extent to which the language must be 
integrated with the structure of the design environment’s knowledge 
representations. Any language useful for extending the expressibility of the design 
environment will be severely constrained by (i) the need to incorporate primitives 
that refer to the elements of the design environment, (ii) the need to incorporate 
functionality that corresponds to the structure and tasks of the design environment 
(e.g., navigating hypermedia links and filtering by specific kinds of criteria), and 
(iii) the goal of making the language accessible to designers. Whether or not an 
end-user language that meets these constraints is built on top of an existing 
language like PASCAL, FP, LISP, or SCHEME it will look like a new language. On 
the other hand, any flexible end -user language would want to incorporate much of 
the power of programming languages and would do well to build upon or model 
itself after a successful language at the computational level. So, in the end the 
proposed alternatives come down to roughly the same thing and the important 
point is the integration of the language with the structure and goals of the design 
environment. Chapter 10 will show how the HERMES language was designed 
specifically to satisfy these constraints.  
Design rationale is a particular concern of Eisenberg and Fischer (1992). They 
want the user to be able to reuse design examples from the catalog and to copy and 
modify the associated rationale.  They recognize that this puts a general 
requirement on the system to support incessant reuse and plasticity: “The upshot 
of all this is that our systems must support users in creating, retrieving, browsing, 
modifying, storing, and reusing information stru ctures that capture design -related 
decisions—and the systems must moreover support this type of activity 
interactively, in the broader context of creating new artifacts” (p.86). 
Unfortunately, they never suggest mechanisms to achieve such system -wide 
plasticity of representation or to organize the proliferation of different versions of 
rationale and other kinds of knowledge. The substrate in HERMES (see Chapter 8) 
is designed to maximize the ability of users to modify all forms of knowledge and 
the perspect ives mechanism (Chapter 9) is available for users to organize their 
versions of knowledge and reuse design examples with their associated rationale 
through virtual copying.  
The HERMES perspectives also solve another problem raised by Eisenberg and 
Fischer (1992), that of maintaining “historical” information. Versions of a design 
at a given state can be saved in their own perspectives. The issue of whether 
something was created by direct manipulation or by programming does not arise 
in HERMES, because the HERMES language does not change state; it only displays, 
analyzes and critiques the current state —which is created via direct manipulation 
and dialog boxes. Although the SCHEMEPAINT (Eisenberg, 1992) programmable 
      Tacit and Explicit U nderstanding in Computer Support                                       213 
  application showed that a programming languag e could be useful in creating 
precise, complex graphics, there is little sense in Eisenberg and Fischer (1992) how 
the language would be used in the creation of designs in other domains.  
The example given for use of the language in a programmable design en vironment 
for graphs does not create new graphs but  queries the hypermedia database. It is to 
“write a procedure to find all catalog entries of a particular graphical type within 
two links of a particular entry” (p.87). This example is not worked out but could 
be accomplished in the HERMES language. Say the particular catalog entry was 
named mike’s graph  and the particular graphical type of interest was pie 
graph. Then the following expression would return the desired results:  
all associations of all associations of mike’s graph that 
are of kind pie graph  
If the only kind of link type of interest is that of similar example  links 
between catalog entries, then one could define list of pies  as: 
similar examples of similar examples of mike’s graph that 
are of kind pie graph  
and then evaluate the expression,  
deliberation of list of pies  
to display the design rationale attached to all the catalog entries in the list.  
Note that in order to carry out this task, all the relevant knowledge must be in an 
integrated knowledge representation, linked together by hypermedia links. That is, 
the catalog items (graphical representations), the specification elements, and the 
design rationale (text and pictures) must be compatible nodes that can be linked 
together in a way that the language can navigate. Both by the nature of the tasks 
that are proposed as desirable by Eisenberg and Fischer (1992) and by the necessity 
of having a single language refer to and analyze all knowledge in the system, an 
argument is implicitly made  for the use of an integrated substrate to define a 
hypermedia structure and its accessibility via the language and perspectives. As 
Part III will show, this is precisely the role of the HERMES substrate as a basis for 
programmable design environments.  
There are good reasons to incorporate programming languages in design 
environments in order to go beyond the limited expressivity of human problem -
domain communication as suggested by the notion of a programmable design 
environment. Systems like KRL, PIE, and DRL have shown the utility of languages 
to define sophisticated knowledge representations and design rationale capture 
systems that can be supported with powerful computational means. Each of these 
systems has, however, run into the need to make the syste ms more usable by 
      Tacit and Explicit U nderstanding in Computer Support                                       214 
  supporting tacit understanding. The PHIDIAS query language has suggested an 
approach to syntax and semantics that promises to reduce the explicit cognitive 
overload of formal programming languages for non -programmers. ACE suggests 
additional techniques for keeping computations tacit and for designing languages 
that help promote plasticity of knowledge representation. HERMES tries to 
incorporate ideas like these to achieve an adequate mix of mechanisms requiring 
tacit and explicit understan ding on the part of designers using an end -user language 
in a design environment. Thereby, it hopes to go far toward overcoming the 
problem of tacit and explicit understanding in the computer support of 
interpretation in design.  
 
 
Part III. Computer Support of 
Cooperative Design  
 
 
 
 
 
   “The philosophers have only interpreted    
   the world in different ways;  
   the point would be to transform  it.” 
     Karl Marx  
     Theses on Feuerbach   
     (1844, S.192)  
 
      Tacit and Explicit U nderstanding in Computer Support                                       216 
  The chapters  of Part III discuss the three major features of H ERMES: the 
hypermedia knowledge representation, the perspectives mechanism, and the 
language. H ERMES is an instantiation of the theory of computer support proposed 
in Part II. The discussion of these featur es of HERMES is intended to illustrate how 
a system based on the theory might look —a set of mechanisms for supporting the 
situated, perspectival, linguistic character of interpretation. While the theory 
suggests the usefulness of a language and a perspecti ves facility, many very 
different kinds of languages and perspectives mechanisms are possible. The 
particular mechanisms in H ERMES that have been prototyped as part of this 
dissertation, suggest one possible approach. The discussion of these mechanisms 
should illustrate the application of the theoretical framework previously developed 
to the concrete design of software; these mechanisms represent an attempt to 
transform the philosophical interpretations into practice . 
In this Part, Chapter 8 discusses the i ntegrated hypermedia structure. This provides 
the medium for representing the design situation using the many media of design. 
The perspectives  mechanism of Chapter 9 provides for flexible organization of all 
knowledge in the system in order to support col laboration. The language presented 
in Chapter 10 offers designers increased power for interpreting, communicating, 
and capturing their tacit understandings more explicitly.  
Each of these chapters is divided into three sections. The first reviews the needs  
which must be addressed by the mechanisms discussed in the chapter. The second 
describes in some detail the implementation of the mechanisms in the HERMES 
prototype. The third illustrates how the explicit mechanisms are actually used by 
designers working in HERMES. Generally, the interfaces to these mechanisms 
encapsulate their computations so that they normally function behind the scenes of 
relatively tacit usage by designers, only becoming more explicit when the 
designers must articulate their understand ing. 
Together, the three mechanisms that are detailed here are intended to support 
interpretation in design. Specifically, they support the situated, perspectival, 
linguistic character of design. The kind of design they are meant to support is that 
of exploratory domains like lunar habitat design, which can be characterized as 
innovative in nature and collaborative in structure. The computer support proposed 
has been developed particularly to help designers move back and forth along the 
spectrum of tacit an d explicit understanding. The description of each mechanism 
will show how it promotes tacit usage as well as facilitating more explicit 
understanding when that becomes temporarily necessary.  
      Tacit and Explicit U nderstanding in Computer Support                                       217 
  CHAPTER 8. REPRESENTING 
THE DESIGN SITUATION  
Many forms of knowledge are required to support design. The lunar habitat 
designers in Chapter 3 used sketches of previous designs, graphical representations 
of design components, discussions of design rationale, terminology for thinking 
about the design, information from experiences of former space missions, 
drawings from references, and guidelines from NASA documents. They viewed 
problems from alternative perspectives,  and they deliberated issues using concepts 
that were redefined in the process. Rather t han simply constructing a solution from 
these many pieces of retrieved knowledge, the designers continually modified the 
knowledge, trying numerous variations. They continually reinterpreted their task, 
candidate solutions, and the knowledge that went into  the solutions.  
To support what Part I of the dissertation described as the process of interpretation 
in design with a computer -based design environment requires a system that 
provides many media of representation. Furthermore, the representations of 
knowledge in the media must be designed to support incessant modification, 
tailoring, customizing, or plasticity by end -users. 
According to Part II, a design environment should be people -centered, supporting 
the human designer’s ability to interpret and make ju dgments. It should support 
tacit usage as well as allowing designers to make knowledge successively more 
explicit to meet their specific interpretive needs. This suggests incorporating an 
end-user language for explicating terms and a perspectives structure  for organizing 
different people’s customized versions of knowledge. To take advantage of the 
computational power of the computer, a design environment should provide a 
computationally active medium in which the designers can work individually, 
communicate  with the computer, and collaborate with other designers on team 
work. 
The HERMES system described in Part III attempts to meet these requirements by 
providing a substrate of functionality that can be used by all components of a 
design environment. It defines a multi -media structure in which all elements of 
knowledge can be defined and  interconnected. All knowledge is represented as 
data that can be retrieved and modified by the end -user. The knowledge 
representation structure integrates a perspectives mechanism so that all 
representations of knowledge are organized into hierarchies of user-defined 
contexts. It also integrates a language that designers can use for defining and 
      Tacit and Explicit U nderstanding in Computer Support                                       218 
  modifying representations of knowledge, including definitions of computer agents 
such as critics, queries, and displays.  
Section 8.1 describes the characteristics of the HERMES substrate. It discusses how 
it meets the requirements from the analysis of design as interpretation presented in 
Part I and from the theory of computer support for interpretation in design 
proposed in Part II. Section 8.2 shows how the substr ate is defined at a more 
technical level. It discusses the knowledge storage, retrieval, modification, and 
interconnection mechanisms. Section 8.3 then illustrates how a lunar habitat design 
environment with multiple components can be built on top of the HERMES 
substrate. In addition to outlining how components for construction, rationale, 
specification, and catalogs can be built, it highlights the usefulness of the 
hypermedia, perspectives, and language in defining these components.  
8.1. A Computationally Active Medium for 
Designers  
The HERMES substrate . HERMES is a substrate for building design environments 
to support interpretation in innovative design. Many of the previous design 
environments discussed in Chapter 7 got along without primary attention bei ng 
given to a substrate level. This is because those systems prototyped functionality 
specific to individual components. However, recently there has been a proliferation 
of efforts related to JANUS to introduce functionality that spans all the components 
of a design environment. K ID (Nakakoji, 1993) pushes the non -substrate, multi -
faceted approach to its limit, integrating design decisions made in one component 
with displays in others by “linking mechanisms” to bridge different knowledge 
representations. Bu t even here, the beginnings of an integrating language are 
established with the formulations of specification -linking rules, which tie together 
several major components (critic rules, specification, catalog, domain 
distinctions). M ODIFIER’s (Girgensohn, 19 92) approach to end -user modifiability 
of data in all components was an effort that naturally led to integration. The 
components whose knowledge became modifiable (e.g., the palette and its critics) 
were, in effect, redesigned to be based on a minimal comm on substrate of LISP 
tools for using property sheets. I NDY (Reeves, 1993) proposes history capture 
mechanisms and embedded annotation techniques that apply to events in all parts 
of the system. In order to implement this, it was necessary to rewrite JANUS to 
represent all events in the system uniformly. Similarly, the idea of a 
“programmable application” (Eisenberg, 1992; Eisenberg & Fischer, 1992) 
      Tacit and Explicit U nderstanding in Computer Support                                       219 
  suggests the applicability of an end -user programming language throughout a 
system, as noted in Chapter 7.  
An explicitly designed substrate is a way to have various special components 
implementing multi -faceted functionality while at the same time providing a base 
of common functionality that is shared by all these components. Certainly, a 
construction component needs to provide some special supports that are not 
appropriate to a design rationale component. However, it may be useful to have 
hypermedia linking, partitioning of knowledge by perspectives, and definition of 
expressions in an end -user language availabl e in many or all the components. An 
architecture based on an integrated substrate can support the multi -faceted 
functionality required for a design environment.  
X-NETWORK (Shipman, 1993), for instance, has hypermedia linking, multi -user 
access, and increme ntal formality mechanisms that must apply to multiple 
components; it implements these within a hypermedia object system substrate. 
HERMES is also a substrate that can provide functionality that applies to all parts 
of a design environment built on it. Its language supports end -user-
programmability of all components,  and its perspectives affect all knowledge used 
in the system. Its critics, palette, catalog, construction, and argumentation displays 
are all programmable in the language and their definitions o r contents are 
dependent upon the selected perspective.  
There are several benefits to creating a design environment substrate. As shown in 
Section 8.3, it facilitates creating new components within an integrated, high -
functionality system by exploiting pow erful existing data structures. It permits 
adding additional trans -component functionality (e.g., for supporting learning, 
collaboration, interpretation, evolving formality, or agent mechanisms) by 
enhancements at the substrate level. It provides an integr ation that helps both 
developers and end -users because the various components now use standardized 
structures, mechanisms, and interfaces, so techniques learned in one component 
transfer well to others.  
The layered architecture of H ERMES has the following structure (see Figure 8.1):  
(1) Programming environment.  This layer includes commercial object libraries for 
list processing, graphics, B+ indexing, windowing user interface, etc., as well as 
the PASCAL source code compiler.  
      Tacit and Explicit U nderstanding in Computer Support                                       220 
   
Figure 8-1. Layered architect ure of H ERMES. 
 
(2) HERMES substrate.  In addition to the hypermedia structure, the language 
definition, and the perspectives mechanism, this substrate level includes an 
efficient, scalable object -oriented database management system for persistence of 
the hypermedia data structure. With the language interpreter, this substrate alone 
consists of about 200 object classes (roughly 20,000 lines of code). The power and 
flexibility of H ERMES for empowering users to represent, manipulate, and interpret 
domain knowl edge comes from the complex interactions of the functionality of the 
substrate—much more than from the higher -level components of the multi -faceted 
user interface built on top of it.  
(3) Design environment user interface.  Components like adaptive palettes,  design 
catalogs, and adaptable argumentation are defined as specialized window objects 
(graphical user interface features). They use the functionality of the substrate to 
retrieve hypermedia nodes in the active perspective using queries in the language. 
Some interface components are necessary for user access to the language and 
perspectives; others are specific to an application, like lunar habitat design. User 
interface components can take advantage of terms defined in the language, so that 
end-users can modify the behavior by redefining the terms.  
(4) Seeded domain knowledge.  The system is initially seeded with knowledge 
specific to the domain for which the system will be used, such as lunar habitat 
design. This includes definitions of useful terms and qu eries in the language and 
an initial hierarchy of perspectives for organizing knowledge. This seeded 

      Tacit and Explicit U nderstanding in Computer Support                                       221 
  information is represented using mechanisms defined in the substrate and is stored 
in the database.  
(5) User definitions and perspectives.  Users can read, modify, and add to any of 
the domain knowledge. They can organize alternative versions of text, graphics, 
and language definitions (e.g., domain distinctions, critics, and queries in the 
language) by perspectives. The substrate is designed to empower users  of various 
skill levels to reuse, modify, and extend all forms of information stored in the 
knowledge base and to reorganize it into meaningful perspectives.  
A hypermedia system.  The HERMES system is built on an extended form of 
hypermedia . Hypermedia ca n be understood as a system of nodes having content 
of various kinds connected together by links to form a network or graph structure. 
Alternatively, if one focuses on the language elements and their interconnections, 
the HERMES hypermedia can be viewed as an extended form of semantic network 
(Woods, 1975). In HERMES, the content of nodes can take th e form of various 
media, such as text (e.g., for the issue -base), graphics (for the construction area), 
or expressions in the HERMES language (like critic rules). In this way, everything 
that needs to be represented in the computer to support design can be  represented 
in an appropriate data structure that is still part of an integrated system. Each 
element of information can be interconnected with other elements as needed.  
The media requirements for a system to support design are extensive. As 
mentioned in  the introduction to this chapter, the lunar habitat designers in the 
transcripts used the following: sketches of previous designs, graphical 
representations of design components, discussions of design rationale, terminology 
for thinking about the design, information from experiences of former space 
missions, drawings from references, and guidelines from NASA documents. In 
order to represent these in the HERMES system, the hypermedia substrate defines 
the following media for the content of nodes: character (text), number (reals), 
conditions (boolean -valued expressions), graphics (vector graphics), images 
(bitmaps), pen -based sketches, sound (recorded voice), and video recordings.  
Because HERMES needs to display information in accordance with interpretations 
that are not pre -defined but are defined by the user, all displays must be computed 
dynamically.  This is done with dynamic displays, in contrast with the page -based 
approach of most hypertext systems. In a program like HYPERCARD, a presentation 
of design r ationale might contain a pre -formatted page of issues. Embedded with 
an issue might be a button for its justification. Clicking on that button brings up 
another page of text presenting the justification. Similarly, in JANUS a page of 
design rationale conta ins highlighted terms; clicking on one of them displays 
information about that term, allowing one to browse through pages of related 
textual information. In HERMES, however, the justification must be recomputed 
based on the current interpretation. This is done by executing a query specifying 
      Tacit and Explicit U nderstanding in Computer Support                                       222 
  the information desired (e.g., justifications of answers of a 
certain issue ) and based on the currently active interpretive perspective. The 
results of the query are then displayed, in place of a pre -formatted page. Thi s 
approach was adopted from the PHIDIAS design environment, which featured a 
limited query language for allowing the user to structure textual displays (McCall, 
1989). Because in this approach design rationale is generally stored at the relatively 
fine granularity of sentences rather than pages, it can be modified either by 
changing or adding short sentences, or by modifying the definition of the query.  
The HERMES language provides the means of navigating the links of the HERMES 
hypermedia. Links between no des have types, like an answer link to connect an 
issue with its answers. In addition, as described in Chapter 10, the language defines 
processes of information retrieval, analysis, filtering, display, and critique, which 
make link traversal more dynamic t han just following static link types. Expressions 
in the language can be incorporated in computational agents or in interface features 
of a design environment. All terms and expressions defined in the language are 
stored as nodes of the hypermedia. The lan guage can also be embedded in the 
hypermedia structure in various ways. For instance, nodes and links can be made 
conditional on an arbitrary expression in the language that evaluates (at run -time) 
to true or false. The content of a node can also be define d by the result of an 
expression in the language that evaluates to a list of other nodes. These two uses 
of the language to make the content of nodes dependent upon the run -time 
evaluation of expressions are known as conditional nodes  and virtual structure s, 
respectively. (See Halasz, 1988, and McCall, et al., 1990a.)  
The hypermedia system also defines and incorporates HERMES’ perspective 
mechanism. The links between nodes maintain lists of which perspectives can or 
cannot view the connected nodes. When the  link is traversed during the evaluation 
of an expression in the language (which is, at an implementation level, the only 
way that the node the link leads to can be retrieved or displayed), the currently 
active perspective is compared with this list.  
Active media.  The HERMES hypermedia provides a computationally active 
medium for designers to work in. All information retrieval, display, analysis, and 
critique are performed by navigating the hypermedia network of nodes and links. 
The content of the nodes may  be dynamically dependent upon other content in the 
network, as in conditional nodes and virtual structures. Whether or not such nodes 
are involved, the retrieval of information depends upon an expression in the 
language, which may in turn be composed of m any other terms, whose definitions 
can be changed. Furthermore, information retrieval and display are always 
dependent upon the current perspective and the list of perspectives from which it 
inherits. All of these dependencies are under the control of the person using the 
system. However, the synergy of the various dependencies (definition of the 
      Tacit and Explicit U nderstanding in Computer Support                                       223 
  retrieval expression, content of nodes, definition of language terms, choice and 
structure of perspectives) quickly exceeds the ability of people to foresee the 
results in detail. Rather, users of the system proceed with a largely tacit 
understanding and the computer works out the details. In this way, people can 
concentrate on the interpretive tasks while the computer takes care of the detailed 
but routine bookkeep ing. This exploits the advantage of a computational medium 
over passive external media like paper.  
People-centered system . The language provides a central control mechanism over 
computational processes in the HERMES system. As such, it makes the control ov er 
all computations ultimately available to designers using the system. The language 
is a means of communication between the computer and its users, through which 
end-users can specify in as much detail as they wish how information is to be 
stored, retriev ed, analyzed, displayed, and critiqued. At the same time, the system 
is seeded with default definitions so that designers do not have to be concerned 
with these matters in any more detail than they need to be as a result of their design 
tasks. 
Because HERMES is designed for exploratory domains like lunar habitat design, 
however, a seeded knowledge base is only a starting point and source of reusable 
definitions. Design requires incessant modification and tailoring of definitions of 
all relevant knowledge ba sed on the particular design situation, the active 
perspective, and the linguistic frameworks and terminology in use. This means that 
all information in the system must be flexibly modifiable.  
It is not only that there are no longer any experts in the trad itional sense because 
systems of knowledge have become too extensive and too rapidly changing for 
individuals to master (Fischer & Nakakoji, 1992). Beyond this, in exploratory 
design tasks like lunar habitat design, there is no such thing as an objective b ody 
of domain knowledge that could even in principle be defined once and for all. So -
called domain knowledge arises through processes of interpretation that are 
situated, perspectival, and linguistic. This certainly does not mean that such 
knowledge is arb itrary or that it cannot be justified. On the contrary, it is grounded 
precisely in the situations, viewpoints, and traditions that provide its background 
knowledge and in the deliberations that importantly accompany it. But the point is 
that alternative v ersions of the knowledge are applicable under different conditions 
and only designers can determine relevance.  
Evolving knowledge base.  The plasticity of HERMES’ language and other media 
takes off from the ideas of PHIDIAS. In PHIDIAS, node and link types were user -
defined. This was a simple matter of allowing users to define new names for types 
of nodes and links. Then, new nodes and the links between them could be labeled 
with any one of these types. The importance of this came in it s effect upon the 
PHIDIAS query language (discussed in Chapter 7). This language consisted largely 
      Tacit and Explicit U nderstanding in Computer Support                                       224 
  of options for combining node and link types. So by careful choice of type names, 
query expressions could be made to read descriptively,  and the language cou ld be 
extended to include new terms. The HERMES language is far more complex, but it 
retains the principle that all semantic elements should be user -definable and 
namable. In fact, this principle is extended to the various media as well, so that 
everything  in the knowledge base can be named and modified.  
All representations of knowledge in the HERMES system are maintained as data in 
the hypermedia information base on disk. This makes it easy for the system 
builders who define components for design environme nts built upon the HERMES 
substrate, for knowledge engineers who seed or reseed the knowledge base, as well 
as for end -users who tailor the information to their own needs. Standard interfaces 
are available for browsing, editing, and extending knowledge in all media.  
The HERMES substrate is designed to support constant tailoring of all information 
in the knowledge base. All nodes in the hypermedia can be browsed, modified, 
annotated, or deleted within the current perspective. Much knowledge is defined 
by language expressions, which can likewise be edited. The terms used in 
expressions can also be edited, and so on recursively. Knowledge is organized by 
perspectives. Together, the hypermedia, perspectives, and language provide 
considerable control over all kno wledge in the system by designers using it. The 
following chapters will detail how this works.  
8.2. Knowledge Representation in the Hermes 
Substrate  
Figure 8-2 shows how the functionality of the most important objects in the 
HERMES substrate is built up. S tarting at the top is the generic HERMES named 
object. Any object descended from this can optionally have a name and can be 
stored on the object stream (file) that functions as the database for HERMES. The 
objects below it in the hierarchy successively acc umulate data slots (indicated in 
parentheses) and methods.  
      Tacit and Explicit U nderstanding in Computer Support                                       225 
   
Figure 8-2. The H ERMES substrate object hierarchy.  
 
The Active object  adds two features that provide considerable power for the 
advanced user: conditionals and procedures. Any object that inherit s these (for 
instance, all varieties of nodes and links and language elements) can be made 
conditional upon a language expression or can incorporate an arbitrary procedure. 
A conditional can be any boolean expression defined in the HERMES language. 
When an object with this conditional is encountered in traversing the hypermedia, 
the conditional is evaluated. If it evaluates to true, then the link can be traversed or 
the node evaluated and displayed, otherwise, the object is ignored. A procedure is 
a user-defined procedure written in any commercial programming language that 
supports WINDOWS dynamic link libraries (DLLs), e.g., PASCAL or C++. HERMES 
includes a DLL with ten procedure identifiers, so that users can define and compile 
up to ten procedures. The pr ocedure identifiers can then be attached to HERMES 
objects. When the object is encountered during hypermedia traversal, the 
procedure is run. This mechanism of procedural attachment has also been used 
internally to implement one of the procedures for the HERMES perspectives 

      Tacit and Explicit U nderstanding in Computer Support                                       226 
  mechanism (see the implementation of “lazy virtual copying” in Chapter 9). With 
these mechanisms, procedures written in either the HERMES language or in a 
general-purpose programming language can be embedded anywhere in the 
hypermedia da tabase. 
Persistent objects  can be retrieved from the HERMES database. They have a unique 
object id, which is used internally for direct random access to the stream on disk. 
A set of methods for persistent objects defines an efficient database management 
system that performs buffered reads from disk. Once accessed, objects are cached 
in memory by these methods since they are likely to be traversed again. For objects 
that have user -defined names, a B+ index is used to retrieve the internal object id 
for object retrieval. This means that even when the database is scaled up to millions 
of objects, any object can be retrieved from disk either by user -defined name or by 
internal id with no appreciable increase in the number of disk accesses. The index 
to the strea m maintains the node kind of each stored node, so lists of nodes of a 
given kind can be generated. Similarly, the index of named objects maintains the 
object type, so lists of named objects of a given language type can be displayed 
quickly for pick lists i n the interface.  
VCopy objects  can participate in the virtual copying mechanisms that implement 
perspectives in HERMES. A set of ten object methods (defined in Section 9.2) are 
used for the virtual copying of nodes, links, hypermedia networks, and 
subnetwo rks. 
Stamped objects  are time-stamped with the name of the person who was logged in 
when the object was created, the date and time of creation, and the date and time 
of the last modification. This information is useful for browsing the knowledge 
base with queries in the language. It can also be used for security systems built on 
top of HERMES. 
Node objects  are the “first class objects” of the HERMES hypermedia system. They 
can all be interconnected in the hypermedia, referred to by the language, and 
organized into perspectives. This is the basis for the interlinked hypermedia 
structure. Any node objects can, for instance, have annotations or arbitrar y features 
attached to them. A node object maintains a tree of links coming into it and a tree 
of links going out. The trees of links consist of lists of link lists, where each link 
list contains links of a given link type. This list of lists is sorted by link type. The 
link lists contain the object ids of the individual links. This structure makes for 
efficient access of a node’s links for traversal and language expression evaluation.  
Links are stored independently of the nodes that they connect, because t hey may 
contain considerable data and may be accessed, traversed, or modified without 
needing to read in their attached nodes (which may be very large for bitmaps, 
video, etc.). A link consists of a list of sublinks, which maintain information about 
      Tacit and Explicit U nderstanding in Computer Support                                       227 
  perspectives, display attributes (e.g., color, font), and spatial transforms (e.g., 
scaling or rotation for 3 -D graphics). By combining a list of sublinks between a 
given two nodes into one link rather than having multiple links between the same 
two nodes, the n umber of links that need to be read in from memory is minimized. 
Combining all links between two nodes is important because there may be very 
bushy trees of sublinks due to the perspectives mechanism’s implementation. For 
many functions, one needs to look at all or many of the sublinks. Also, often one 
only wants to cross one sublink of a link (the first one), otherwise one would get 
multiple copies; this is efficiently done with a for -each or for -first method on a list 
of sublinks.  
Contexts, node kinds, and link types are very simple node objects. They just have 
user-defined names. Contexts are linked in a hierarchy that defines the perspectives 
and their inheritance relations (see Chapter 9). Node kinds and link types can have 
synonyms defined. When they are created, the HERMES interface suggests a plural 
form to be defined as a synonym. This is useful for making language expressions 
smoothly readable.  
Nodes have no content themselves. Rather, they have content links that connect 
them to content nodes that  contain the content (e.g., characters, numbers, language 
elements). This separation of the named nodes from their content is useful and 
efficient in a number of ways. It allows a given node to have multiple contents. It 
may have a different content in dif ferent perspectives; it may have several contents 
of the same or different media; or it may be part of a hierarchy of graphical objects, 
from a complex lunar habitat, through its components and subcomponents, down 
to its ultimate polylines of points in 3 -D space. The separation of nodes and 
contents allows perspectives information (as well as display attributes and spatial 
transforms) to be stored in the intervening links. There are also accessing 
efficiencies that result from the separation.  
Content nodes  provide the knowledge representation media. The language 
elements and terminology  elements are explained in Chapter 10 and in Appendix 
C. The media elements provide the various media required for supporting design. 
These media elements are traditional obje cts of hypermedia systems. However, as 
part of the HERMES substrate their retrieval, modification, display, and analysis 
take place through mechanisms that are standardized across components, allow 
integration, are fine -grained, are organized in perspectiv es, provide for plasticity, 
and are computed dynamically.  
      Tacit and Explicit U nderstanding in Computer Support                                       228 
  8.3. Lunar Habitat Design Environments  
This section will indicate how design environments built on top of HERMES can 
achieve goals that have long been set for JANUS and PHIDIAS but not previously 
achieved. In particular, it will argue that the combination of a powerful, integrated 
hypermedia substrate, a perspectives mechanism, and an end -user language 
facilitate the desired functionality.  
Figure 8-3 shows a screen view of five open windows that are typical of the 
HERMES interface. This screen view is taken from a prototype Lunar Habitat 
Design Environment ( LHDE) built on top of HERMES. From left to right, the 
windows are:  
1. A control dialog for navigating hypermedia. It shows the selection of the 
discussion  predicate for navigating the out -going links from an issue, 
“What are the design considerations for bunks?” Discussion  is an 
expression in the HERMES end-user programming language, defined as an 
indented hierarchy of issues, subissues, answers, an d arguments. The results 
of the query, discussion of  the selected issue, is displayed in the next 
window. 
2. The Design Rationale window shows the results of the query evaluated in the 
privacy perspective. The query was defined in the previous control dial og 
window by choosing a predicate relevant to the issue link type going out of 
the selected issue.  
3. The Critique window displays the result of the critics analyzing the construction 
of a lunar habitat. The critics were evaluated as defined within the pri vacy 
perspective. The user-initiated critiquing with a button (not shown) in the next 
window. 
4. The Drawing window or construction area displays the current design. This 
window has buttons (not shown in the Figure) to change perspective, save the 
drawing in the current context, navigate links connected to the drawing (its 
rationale), and critique the construction.  
5. The Context selection window (partially shown) allows the user to change to a 
new interpretive perspective in the context hierarchy. This aff ects contents of 
textual nodes, definitions of elements of the language used for expressing 
queries and critics, and contents of drawings.  
 
      Tacit and Explicit U nderstanding in Computer Support                                       229 
  
discussion of issue;
W hat are the design considerations for bunks?for bunks? 
Figure 8-3. A screen view of the LHDE interface.  
 
In this interface to LHDE, one can see a 2 -D graphical construction area similar to 
that of JANUS and PHIDIAS. Subsequently, a version of PHIDIAS II has been built 
on top of the HERMES substrate by researchers in the College of Environmental 
Design’s CAD l ab. It features a very general 3 -D construction area, which can be 
viewed from any angle and distance. It allows a designer to move through the 
design space and view things at greater or less distance. The LHDE interface shown 
in Figure 8 -3 has a palette o f simple geometric shapes along the left edge of the 
drawing window. The PHIDIAS II interface has palettes of chairs, tables, etc. 
specifically for lunar habitat designs. In both cases, the palettes are “hard -wired” 
and cannot be modified by end -users. How ever, this is not necessary when using 
the HERMES substrate. Instead, one could define an expression in the language to 
display a palette. This has not been done because PHIDIAS II’s 3-D graphics system 
is not yet fully integrated with the HERMES substrate. The advantages of an 
integrated approach will be discussed below.  
The LHDE interface shows a view of design rationale. This is dynamically 
displayed based on the results of the language expression, discussion of  the 
issue selected (“What are the design c onsiderations for bunks?”). Note that the 
system user did not have to worry about “programming” in the language. 
Everything was done by direct manipulation, and the language implemented things 
      Tacit and Explicit U nderstanding in Computer Support                                       230 
  behind the scenes. The user selected an issue with the mouse in  a previous Design 
Rationale window. The Navigation dialog appeared, with the “Navigate out -going 
links” option already chosen as the default and with the names of types of links 
coming out of the selected issue (namely, issue, i.e., subissues) listed in t he Out-
going Links box and the names of predicates “relevant” to those types (i.e., 
language expressions that begin by traversing links of those types) listed in the 
Predicates box. When the user selected discussion  from the list of Predicates, 
the system automatically applied the discussion  predicate to the previously 
selected node and evaluated the resulting language expression within the active 
perspective. The result is displayed in the new Design Rationale window. That 
window also has buttons so that t he user can modify the display in a number of 
ways. The display can be replaced by selecting previously saved results. (A button 
for saving the current results is located at the bottom of the window.) Another 
button allows the user to select a different qu ery to be evaluated; it displays a list 
of all defined queries. A third button allows the user to create a new query. This is 
the point where something like programming may enter, although the interface for 
the language encourages reuse and modification of  previously defined expressions 
(see Chapter 10). Finally, a last button allows the user to select a different 
perspective, thereby changing the display.  
The PHIDIAS II interface provides an alternative display mode for design rationale 
and similar displa ys. Rather than showing an entire indented structure, it displays 
the top level of the outline form only (the unindented nodes). Every node that has 
hidden indented material is indicated with a small icon. Clicking on that icon 
displays the next level of i ndentation under that node. (This is similar to file 
directory displays in the Macintosh SYSTEM 7 and WINDOWS 3.1.) What is 
interesting here is that this mechanism is implemented with the HERMES language, 
not in a hard -wired, programmed -in way. That is, cl icking on a node’s icon causes 
the evaluation of the expression, all associations  of that node in the result 
list. The availability of the language made it easy to implement this interface 
feature and  ensures that the feature can be flexibly modified by si mply modifying 
the definition of the language expression (which does not require recompilation) 
and can be done by an end -user. 
The critics in LHDE are passive agents, similar to the triggers in PHIDIAS. That is, 
the user must press a button to evaluate th e critic rules. In LHDE, the critic rules 
are expressions in the language. (See Chapter 10 for the LHDE version of JANUS’ 
kitchen critics and for an analysis of privacy critics for lunar habitats.) No 
additional mechanisms are necessary because the language is designed to traverse 
and analyze the hypermedia representations of the design situation. In PHIDIAS II, 
the trigger s for displaying design rationale on the selection and location of palette 
items is implemented using the HERMES language. For instance, the trigger for 
      Tacit and Explicit U nderstanding in Computer Support                                       231 
  selection of chairs evaluates the expression, discussion of chair 
selection issue . As discussion  is defined in the LHDE seed, this goes 
to the issue named chair selection issue  in the issue base and displays 
all the related issues, answers , and arguments . 
Of course, one could add additional components to a design environment built on 
HERMES. For instance, o ne could make critics fire automatically when a design 
unit they were defined for is moved, as in JANUS. One could define specification 
linking mechanisms as in KID, or formalization mechanisms as in X -NETWORK. 
Even if these mechanisms were borrowed from o ther systems, the HERMES 
substrate would pay off. Critic rules would still be defined in the HERMES 
language, without having to be programmed in LISP, and they could be associated 
with design units via general -purpose hypermedia links instead of special 
mechanisms. The specification linking would be greatly simplified in LHDE by 
defining domain distinctions as well as critic rules in the HERMES language, and 
then using the language to traverse the specification hypertext. Even the 
formalization mechanisms w ould be aided by using the HERMES language for 
formulating queries (as suggested in Chapter 7) and for providing a medium of 
formal (computer understandable) expression. The perspectives feature would also 
come in handy, allowing different versions of crit ics to be organized into 
perspectives and using these perspectives for making their critics more specific to 
the situation corresponding to that perspective (perhaps obviating the need for a 
separate specification mechanism).  
The most important benefit of the HERMES substrate is the synergy possible with 
the hypermedia network, the perspectives organization, and the language 
expressivity. For instance, the HERMES substrate provides a useful basis for finally 
achieving the goals proposed as “future work” in the classic JANUS paper (Fischer, 
McCall, Morch, 1989), as discussed in the following paragraphs:  
(1) Within the argumentation system there is a pressing need for authoring 
to be integrated with browsing. (2) Allowing ad hoc authoring during 
browsing would  enable the designer to annotate the issue base, record 
decisions on issues and generally personalize the argumentation. (3) This 
in turn would create the need for certain basic kinds of inference 
mechanisms. (4) For example, if the designer has rejected t he answer 
“dining area” to the issue “What functional areas should the kitchen 
contain?” then the system should probably not display any issues, answers 
or arguments that presuppose or assume that the kitchen has a dining area.  
(5) Construction and argumen tation might usefully be connected in a 
number of additional ways. (6) Catalog examples could be used to 
      Tacit and Explicit U nderstanding in Computer Support                                       232 
  illustrate argumentation, and argumentation could be used to help in 
selecting examples from the catalog (p.12; sentence numbering added).  
(1) Integrating authoring with browsing . In the LHDE interface, authoring is 
integrated with browsing. At every step of hypermedia browsing, the navigation 
dialog in Figure 8 -3 gives the user a choice of traversing out -going links, traversing 
in-coming (inverse) links , editing the current node or authoring or annotating the 
node. The editing option brings up an editor appropriate to the medium of the 
current node, with its content ready to be edited. (In cases of multiple contents, the 
contents are automatically placed  in the editor consecutively.) The authoring 
option allows the user to create a new node and link it to the current node. 
Annotation is a typical application of this, where one links a text node to the current 
node with a link of type annotation . Adding th e phrase, with their 
annotations,  to a predicate will then include all the attached annotations in a 
given display. Of course, all authoring in LHDE takes place within the current 
perspective.  
(2) Personalizing the argumentation . The authoring option in LHDE is also used 
for recording decisions in an issue base. Suppose you are browsing through a series 
of issues that correspond to the issues in KID’s specification component. Then 
when you come to an answer that you wish to accept as a specification for you r 
design, you can author a node that you attach to the answer with a resolution  
link. You define its content as the boolean value true. (This is easier to do in the 
LHDE interface than it sounds when described because the separation of nodes from 
their content is never apparent to the user, and the hypermedia linking is generally 
transparent.) In favoring the personalizing of the argumentation in the preceding 
quotation, the developers of JANUS did not carefully consider  the implications of 
having many users “personalizing” the same homogeneous issue base. It is one 
thing for Rittel to have advocated including the deliberations of half a dozen 
opposing positions in a single issue base; quite another to accumulate the 
exploratory thoughts of arbitrarily many users, over long periods of time, following 
diverse and unrelated interests. This may not be a problem for a single -user system; 
however, LHDE is intended as a repository for extensive exploration. The 
perspectives mech anism is an important tool that allows “personalization” to scale 
up in LHDE and to function in a collaborative setting.  
(3) Inference mechanisms . In HERMES, the inference mechanism is not some add -
on function, but the embedded language itself. While the l anguage does not allow 
fully general inference across large sets of production rules, it does allow people 
to encode dependencies. Conditionals, for instance, are used in a number of ways 
in LHDE. The evaluation of any object in the database can be made co nditional 
upon an arbitrary expression in the HERMES language that evaluates to true or 
false. Queries incorporating such conditional expressions can also be defined as 
      Tacit and Explicit U nderstanding in Computer Support                                       233 
  the content of nodes. Another approach is used in LHDE to preface display 
expressions w ith conditional expressions, as illustrated in point (4).  
(4) Adaptive argumentation . In LHDE one can build up a dining area 
conditional  as follows:  
if resolutions of answers of the functional areas issue 
that contain “dining area” are true.  
As would be c lear when building this expression in the language interface (shown 
in Chapter 10), the phrase, that contain “dining area”,  is applied to 
the answers  of the functional areas issue  prior to checking if the 
resolutions  of the answers  that pass through that f iltering condition have 
the boolean content, true. Once this conditional expression has been defined, it 
can be used in the variety of ways suggested in point (3). For instance, if the design 
rationale included the display expression, discussion of dining area 
issues, then that expression could be modified to be: if dining area 
conditional then discussion of dining area issues . This 
would display the issues, answers , and arguments  concerning dining areas 
if and only if the dining area answer  of the function al areas 
issue had been resolved in the positive.  
(5) Connecting construction and argumentation . Because the HERMES 
hypermedia substrate integrates the construction graphics and the design rationale 
text, graphical examples from the catalog can be linked to entries in the issue base. 
Assume that a particular kitchen layout is linked to an issue about dining areas 
with an examples  link. Then you can amend the display expression above to 
include dining area issues with their examples . Depending on 
whether the LHDE or PHIDIAS II interface was being used, either the text and 
graphics would be inter -mixed in the outline inden ted form, or the graphic 
examples would be represented by an icon and clicking on that icon would display 
the graphic in situ or in another window.  
(6) Connecting catalog and argumentation . In LHDE, catalogs are not fixed 
displays. They are defined by lang uage expressions. These expressions can, of 
course, be modified with conditionals and other inferencing computations. 
Following are some sample catalog definitions illustrating a filtering of the content 
of the displayed catalog based on decisions in the a rgumentation (i.e., the issue 
base is treated as a specification component):  
if dining area conditional then kitchens that contain 
dining areas  
if safety is important then kitchens that are safe  
      Tacit and Explicit U nderstanding in Computer Support                                       234 
  if privacy is important then habitats that have parts that 
have privacy ratings  
if privacy is important then privacy gradient catalog  
The first of these evaluates the conditional that was defined earlier. If it is true, 
then kitchens  are displayed if they contain subparts that are of node kind 
dining areas . The seco nd makes use of an expression named safety is 
important , that checks the resolution of some issue related to safety. It then 
evaluates an expression that performs an analysis of kitchen layouts similar to the 
safety-related subset of JANUS’ critics. The th ird again begins with a specification 
conditional. It then accesses all habitats in the database. For each habitat, it goes 
through its subparts to see if any of them have a link of type privacy rating . 
As soon as such a link is found, the habitat is added  to the list of items to be 
displayed. The last expression takes the idea of the third one further, critiquing the 
separation of parts of a lunar habitat based on the privacy ratings attached to its 
parts (see Chapter 10 for a detailed analysis of this las t expression).  
These examples of the synergy possible with the HERMES substrate have 
emphasized the use of hypermedia linking made possible by an integrated 
substrate. That is, all the objects inherit common functionality, including the ability 
to be linke d together. The role of the language as a tool for traversing the 
hypermedia has also been emphasized. Expressions in the language can be defined 
to relate information from different components of a design environment. The 
utility of the perspectives mecha nism has not been stressed as much. However, it 
can play a powerful role in personalizing the information, in coordinating sets of 
specifications, and in promoting collaboration. That theme will be taken up in the 
next chapter.  
